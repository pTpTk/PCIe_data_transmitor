// 009790059735ee96e6439ba5408007fa Generated file. Do not edit.
// File created by WPP compiler version 10.0.19041
// from template km-default.tpl

#pragma once

// template km-header.tpl

#ifdef  WPP_THIS_FILE
// included twice
#       define  WPP_ALREADY_INCLUDED
#       undef   WPP_THIS_FILE
#endif  // #ifdef WPP_THIS_FILE

#define WPP_THIS_FILE dma_engine_c

#ifndef WPP_ALREADY_INCLUDED

#define WPP_KERNEL_MODE 

#include <evntrace.h>
#include <stddef.h>
#include <stdarg.h>
#include <wmistr.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef
LONG
(*PFN_WPPQUERYTRACEINFORMATION) (
    IN  TRACE_INFORMATION_CLASS TraceInformationClass,
    OUT PVOID  TraceInformation,
    IN  ULONG  TraceInformationLength,
    OUT PULONG RequiredLength OPTIONAL,
    IN  PVOID  Buffer OPTIONAL
    );

typedef
LONG
(*PFN_WPPTRACEMESSAGE)(
    IN ULONG64  LoggerHandle,
    IN ULONG   MessageFlags,
    IN LPCGUID MessageGuid,
    IN USHORT  MessageNumber,
    IN ...
    );

typedef enum _WPP_TRACE_API_SUITE {
    WppTraceDisabledSuite,
    WppTraceWin2K,
    WppTraceWinXP,
    WppTraceTraceLH,
    WppTraceServer08,
    WppTraceMaxSuite
} WPP_TRACE_API_SUITE;

_IRQL_requires_same_
typedef
VOID
(NTAPI *PETW_CLASSIC_CALLBACK)(
    _In_ LPCGUID Guid,
    _In_ UCHAR ControlCode,
    _In_ PVOID EnableContext,
    _In_opt_ PVOID CallbackContext
    );

_IRQL_requires_same_
typedef
NTSTATUS
NTKERNELAPI
(FN_ETWREGISTERCLASSICPROVIDER)(
    _In_ LPCGUID ProviderGuid,
    _In_ ULONG Type,
    _In_ PETW_CLASSIC_CALLBACK EnableCallback,
    _In_opt_ PVOID CallbackContext,
    _Out_ PREGHANDLE RegHandle
    );

typedef FN_ETWREGISTERCLASSICPROVIDER *PFN_ETWREGISTERCLASSICPROVIDER;

typedef
BOOLEAN
NTKERNELAPI
(FN_WPPGETVERSION)(
    _Out_opt_ PULONG MajorVersion,
    _Out_opt_ PULONG MinorVersion,
    _Out_opt_ PULONG BuildNumber,
    _Out_opt_ PUNICODE_STRING CSDVersion
    );

typedef FN_WPPGETVERSION *PFN_WPPGETVERSION;

typedef
NTSTATUS
NTKERNELAPI
(FN_ETWUNREGISTER)(
    _In_ REGHANDLE RegHandle
    );

typedef FN_ETWUNREGISTER *PFN_ETWUNREGISTER;

#pragma prefast(suppress:__WARNING_ENCODE_GLOBAL_FUNCTION_POINTER, "this pointer can not be encoded");
__declspec(selectany) PFN_WPPQUERYTRACEINFORMATION   pfnWppQueryTraceInformation = NULL;

#pragma prefast(suppress:__WARNING_ENCODE_GLOBAL_FUNCTION_POINTER, "this pointer can not be encoded");
__declspec(selectany) PFN_WPPTRACEMESSAGE            pfnWppTraceMessage = NULL;

#pragma prefast(suppress:__WARNING_ENCODE_GLOBAL_FUNCTION_POINTER, "this pointer can not be encoded");
__declspec(selectany) PFN_ETWUNREGISTER              pfnEtwUnregister = NULL;

#pragma prefast(suppress:__WARNING_ENCODE_GLOBAL_FUNCTION_POINTER, "this pointer can not be encoded");
__declspec(selectany) PFN_ETWREGISTERCLASSICPROVIDER pfnEtwRegisterClassicProvider = NULL;

#pragma prefast(suppress:__WARNING_ENCODE_GLOBAL_FUNCTION_POINTER, "this pointer can not be encoded");
__declspec(selectany) PFN_WPPGETVERSION              pfnWppGetVersion = NULL;


__declspec(selectany) WPP_TRACE_API_SUITE            WPPTraceSuite = WppTraceDisabledSuite;

#if !defined(_NTRTL_)
#if !defined(_NTHAL_)
// fake RTL_TIME_ZONE_INFORMATION //
typedef int RTL_TIME_ZONE_INFORMATION;
#endif
#define _WMIKM_
#endif

#ifndef WPP_TRACE
#define WPP_TRACE pfnWppTraceMessage
#endif

#if ENABLE_WPP_RECORDER

#define _ENABLE_WPP_RECORDER TRUE

#ifndef WPP_RECORDER
#define WPP_RECORDER WppAutoLogTrace
#endif

//
// This setting is only applicable when IFR is enabled.
// Setting this to 1 will allow a WPP trace session to 
// capture trace messages as usual i.e it will require the
// user to provide WPP trace ENABLED and LOGGER macro. If 
// this is set to 0 by default the IFR trace filter also
// affects which trace messages land in the WPP trace session.
//
#if !defined(ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER)
#define ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER 0
#endif

#if !defined(WPP_RECORDER_LEVEL_FLAGS_ARGS)
#define WPP_RECORDER_LEVEL_FLAGS_ARGS(lvl, flags) WPP_CONTROL(WPP_BIT_ ## flags).AutoLogContext, lvl, WPP_BIT_ ## flags
#define WPP_RECORDER_LEVEL_FLAGS_FILTER(lvl,flags) (lvl < TRACE_LEVEL_VERBOSE || WPP_CONTROL(WPP_BIT_ ## flags).AutoLogVerboseEnabled)
#endif


#if !defined(WPP_RECORDER_LEVEL_ARGS)
#define WPP_RECORDER_LEVEL_ARGS(lvl) WPP_CONTROL(WPP_BIT_ ## lvl).AutoLogContext, 0, WPP_BIT_ ## lvl
#define WPP_RECORDER_LEVEL_FILTER(lvl) (WPP_CONTROL(WPP_BIT_ ## lvl).AutoLogVerboseEnabled)
#endif

NTSTATUS
WppAutoLogTrace(
    IN PVOID              AutoLogContext,
    IN UCHAR              MessageLevel,
    IN ULONG              MessageFlags,
    IN LPGUID             MessageGuid,
    IN USHORT             MessageNumber,
    IN ...
    );

#else
#define _ENABLE_WPP_RECORDER FALSE
#endif

VOID
WppLoadTracingSupport(
    VOID
    );

NTSTATUS
WppTraceCallback(
    _In_ UCHAR MinorFunction,
    _In_opt_ PVOID DataPath,
    _In_ ULONG BufferLength,
    _Inout_updates_bytes_(BufferLength) PVOID Buffer,
    _Inout_ PVOID Context,
    _Out_ PULONG Size
    );

#if !defined(WPP_TRACE_CONTROL_NULL_GUID)
DEFINE_GUID(WPP_TRACE_CONTROL_NULL_GUID, 0x00000000L, 0x0000, 0x0000, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
#endif

#define WPP_TRACE_CONTROL(Function,Buffer,BufferSize,ReturnSize) WppTraceCallback(Function,NULL,BufferSize,Buffer,&WPP_CB[0],&ReturnSize);

__inline ULONG64 WppQueryLogger(_In_opt_ PCWSTR LoggerName)
{
    if (WppTraceWinXP != WPPTraceSuite) {
        return (ULONG64)0;
    }

    ULONG ReturnLength;
    LONG Status;
    ULONG64 TraceHandle;
    UNICODE_STRING Buffer;

    RtlInitUnicodeString(&Buffer, LoggerName ? LoggerName : L"stdout");

    Status = pfnWppQueryTraceInformation(TraceHandleByNameClass,
                                         (PVOID)&TraceHandle,
                                         sizeof(TraceHandle),
                                         &ReturnLength,
                                         (PVOID)&Buffer
                                         );
    if (Status != STATUS_SUCCESS) {
        return (ULONG64)0;
    }

    return TraceHandle;
}

typedef LONG (*WMIENTRY_NEW)(
    _In_ UCHAR MinorFunction,
    _In_opt_ PVOID DataPath,
    _In_ ULONG BufferLength,
    _Inout_updates_bytes_(BufferLength) PVOID Buffer,
    _In_ PVOID Context,
    _Out_ PULONG Size
    );

typedef struct _WPP_TRACE_CONTROL_BLOCK
{
    WMIENTRY_NEW                        Callback;
    LPCGUID                             ControlGuid;
    struct _WPP_TRACE_CONTROL_BLOCK    *Next;
    __int64                             Logger;
    PUNICODE_STRING                     RegistryPath;
    UCHAR                               FlagsLen;
    UCHAR                               Level;
    USHORT                              Reserved;
    ULONG                               Flags[1];
    ULONG                               ReservedFlags;
    REGHANDLE                           RegHandle;
#if ENABLE_WPP_RECORDER
    PVOID                               AutoLogContext;
    USHORT                              AutoLogVerboseEnabled;
    USHORT                              AutoLogAttachToMiniDump;
#endif
} WPP_TRACE_CONTROL_BLOCK, *PWPP_TRACE_CONTROL_BLOCK;

VOID WppCleanupKm(_When_(_ENABLE_WPP_RECORDER, _In_) _When_(!_ENABLE_WPP_RECORDER, _In_opt_) PDRIVER_OBJECT DriverObject);

#define WPP_CLEANUP(DriverObject) WppCleanupKm((PDRIVER_OBJECT)DriverObject)

#define WPP_IsValidSid RtlValidSid
#define WPP_GetLengthSid RtlLengthSid

//
// Callback routine to be defined by the driver, which will be called from WPP callback
// WPP will pass current valued of : GUID, Logger, Enable, Flags, and Level
//
// To activate driver must define WPP_PRIVATE_ENABLE_CALLBACK in their code, sample below
// #define WPP_PRIVATE_ENABLE_CALLBACK MyPrivateCallback;
//
typedef
VOID
(*PFN_WPP_PRIVATE_ENABLE_CALLBACK)(
    _In_ LPCGUID Guid,
    _In_ __int64 Logger,
    _In_ BOOLEAN Enable,
    _In_ ULONG Flags,
    _In_ UCHAR Level);

#ifdef __cplusplus
} // extern "C"
#endif

#endif  // #ifndef WPP_ALREADY_INCLUDED

// template control.tpl

//
//     Defines a set of macro that expand control model specified
//     with WPP_CONTROL_GUIDS (example shown below)
//     into an enum of trace levels and required structures that
//     contain the mask of levels, logger handle and some information
//     required for registration.
//

#ifndef WPP_ALREADY_INCLUDED

#define WPP_EVAL(x) x
#define WPP_STR(x)  #x
#define WPP_STRINGIZE(x) WPP_STR(x)
#define WPP_GLUE(a, b)  a ## b
#define WPP_GLUE3(a, b, c)  a ## b ## c
#define WPP_GLUE4(a, b, c, d)  a ## b ## c ## d
#define WPP_XGLUE(a, b) WPP_GLUE(a, b)
#define WPP_XGLUE3(a, b, c) WPP_GLUE3(a, b, c)
#define WPP_XGLUE4(a, b, c, d) WPP_GLUE4(a, b, c, d)

///////////////////////////////////////////////////////////////////////////////////
//
// #define WPP_CONTROL_GUIDS \
//     WPP_DEFINE_CONTROL_GUID(Regular,(81b20fea,73a8,4b62,95bc,354477c97a6f), \
//       WPP_DEFINE_BIT(Error)      \
//       WPP_DEFINE_BIT(Unusual)    \
//       WPP_DEFINE_BIT(Noise)      \
//    )        \
//    WPP_DEFINE_CONTROL_GUID(HiFreq,(91b20fea,73a8,4b62,95bc,354477c97a6f), \
//       WPP_DEFINE_BIT(Entry)      \
//       WPP_DEFINE_BIT(Exit)       \
//       WPP_DEFINE_BIT(ApiCalls)   \
//       WPP_DEFINE_BIT(RandomJunk) \
//       WPP_DEFINE_BIT(LovePoem)   \
//    )

#ifdef __cplusplus
extern "C" {
#endif

#ifndef WPP_NO_CONTROL_GUIDS

#ifdef WPP_DEFAULT_CONTROL_GUID
#  ifdef WPP_CONTROL_GUIDS
#     error WPP_DEFAULT_CONTROL_GUID cannot be used together with WPP_CONTROL_GUIDS.
#  else // WPP_CONTROL_GUIDS
#     define WPP_CONTROL_GUIDS \
         WPP_DEFINE_CONTROL_GUID(Default,(WPP_DEFAULT_CONTROL_GUID), \
         WPP_DEFINE_BIT(Error)   \
         WPP_DEFINE_BIT(Unusual) \
         WPP_DEFINE_BIT(Noise)   \
      )
#  endif // WPP_CONTROL_GUIDS
#endif // WPP_DEFAULT_CONTROL_GUID

#ifndef WPP_CONTROL_GUIDS
#  pragma message(__FILE__ " : error : Please define control model via WPP_CONTROL_GUIDS or WPP_DEFAULT_CONTROL_GUID macros")
#  pragma message(__FILE__ " : error : don't forget to call WPP_INIT_TRACING and WPP_CLEANUP in your main, DriverEntry or DllInit")
#  pragma message(__FILE__ " : error : see tracewpp.doc for further information")
#  error WPP_CONTROL_GUIDS not defined.
#endif // WPP_CONTROL_GUIDS
// a set of macro to convert a guid in a form x(81b20fea,73a8,4b62,95bc,354477c97a6f)
// into either a a struct or text string

#define _WPPW(x) WPP_GLUE(L, x)

#define WPP_GUID_NORM(l,w1,w2,w3,ll) l ## w1 ## w2 ## w3 ## ll
#define WPP_GUID_TEXT(l,w1,w2,w3,ll) #l "-" #w1 "-" #w2 "-" #w3 "-" #ll
#define WPP_GUID_WTEXT(l,w1,w2,w3,ll) _WPPW(#l) L"-" _WPPW(#w1) L"-" _WPPW(#w2) L"-" _WPPW(#w3) L"-" _WPPW(#ll)
#define WPP_EXTRACT_BYTE(val,n) (((ULONGLONG)(0x ## val) >> (8 * n)) & 0xFF)
#define WPP_GUID_STRUCT(l,w1,w2,w3,ll) {0x ## l, 0x ## w1, 0x ## w2,\
     {WPP_EXTRACT_BYTE(w3, 1), WPP_EXTRACT_BYTE(w3, 0),\
      WPP_EXTRACT_BYTE(ll, 5), WPP_EXTRACT_BYTE(ll, 4),\
      WPP_EXTRACT_BYTE(ll, 3), WPP_EXTRACT_BYTE(ll, 2),\
      WPP_EXTRACT_BYTE(ll, 1), WPP_EXTRACT_BYTE(ll, 0)} }

#ifndef WPP_FORCEINLINE
#define WPP_FORCEINLINE __forceinline
#endif

// define an enum of control block names
//////
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) WPP_XGLUE(WPP_CTL_, WPP_EVAL(Name)),
enum WPP_CTL_NAMES { WPP_CONTROL_GUIDS WPP_LAST_CTL};
#undef WPP_DEFINE_CONTROL_GUID

// define control guids
//////
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) \
extern __declspec(selectany) const GUID WPP_XGLUE4(WPP_, ThisDir, _CTLGUID_, WPP_EVAL(Name)) = WPP_GUID_STRUCT Guid;
WPP_CONTROL_GUIDS
#undef WPP_DEFINE_CONTROL_GUID

// define enums of individual bits
/////
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) \
    WPP_XGLUE(WPP_BLOCK_START_, WPP_EVAL(Name)) = WPP_XGLUE(WPP_CTL_, WPP_EVAL(Name)) * 0x10000, Bits WPP_XGLUE(WPP_BLOCK_END_, WPP_EVAL(Name)),
# define WPP_DEFINE_BIT(Name) WPP_BIT_ ## Name,
enum WPP_DEFINE_BIT_NAMES { WPP_CONTROL_GUIDS };
# undef WPP_DEFINE_BIT
#undef WPP_DEFINE_CONTROL_GUID

#define WPP_MASK(CTL)    (1 << ( ((CTL)-1) & 31 ))
#define WPP_FLAG_NO(CTL) ( (0xFFFF & ((CTL)-1) ) / 32)
#define WPP_CTRL_NO(CTL) ((CTL) >> 16)

// calculate how many DWORDs we need to get the required number of bits
// upper estimate. Sometimes will be off by one
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) | WPP_XGLUE(WPP_BLOCK_END_, WPP_EVAL(Name))
enum _WPP_FLAG_LEN_ENUM { WPP_FLAG_LEN = 1 | ((0 WPP_CONTROL_GUIDS) & 0xFFFF) / 32 };
#undef WPP_DEFINE_CONTROL_GUID

//
// Check that maximum number of flags does not exceed 32
//
#ifndef C_ASSERT
#define C_ASSERT(e) typedef char __C_ASSERT__[(e)?1:-1]
#endif

#define MAX_NUMBER_OF_ETW_FLAGS 34 // 32 flags plus 2 separators
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) && ((WPP_XGLUE(WPP_BLOCK_END_, WPP_EVAL(Name) & 0xFFFF)) < MAX_NUMBER_OF_ETW_FLAGS)
enum _WPP_FLAG_LEN_ENUM_MAX { WPP_MAX_FLAG_LEN_CHECK = (1 WPP_CONTROL_GUIDS) };
#undef WPP_DEFINE_CONTROL_GUID

#ifndef WPP_CB
#define WPP_CB      WPP_GLOBAL_Control
#endif
#ifndef WPP_CB_TYPE
#define WPP_CB_TYPE WPP_PROJECT_CONTROL_BLOCK
#endif

#ifndef WPP_CHECK_INIT
#define WPP_CHECK_INIT (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) &&
#endif

typedef union {
    WPP_TRACE_CONTROL_BLOCK Control;
    UCHAR ReserveSpace[ sizeof(WPP_TRACE_CONTROL_BLOCK) + sizeof(ULONG) * (WPP_FLAG_LEN - 1) ];
} WPP_CB_TYPE ;


extern __declspec(selectany) WPP_CB_TYPE *WPP_CB = (WPP_CB_TYPE*)&WPP_CB;

#if ENABLE_WPP_RECORDER
#ifndef WPP_RECORDER_CHECK_INIT
#define WPP_RECORDER_CHECK_INIT (WPP_RECORDER_INITIALIZED != (WPP_CB_TYPE*)&WPP_RECORDER_INITIALIZED) &&
#endif
// Global varaible used to track if WPP_RECORDER was initialized.
// It will be initialized on calling WPP_INIT_TRACING macro.
extern __declspec(selectany) WPP_CB_TYPE *WPP_RECORDER_INITIALIZED = (WPP_CB_TYPE*)&WPP_RECORDER_INITIALIZED;
#endif

#define WPP_CONTROL(CTL) (WPP_CB[WPP_CTRL_NO(CTL)].Control)

// Define the default WPP_LEVEL_LOGGER/WPP_LEVEL_ENABLED macros for the
// predefined DoTraceMessage(LEVEL) function.
#ifdef WPP_USE_TRACE_LEVELS

#ifndef WPP_LEVEL_LOGGER
#define WPP_LEVEL_LOGGER(lvl) (WPP_CONTROL(WPP_BIT_ ## DUMMY).Logger),
#endif
#ifndef WPP_LEVEL_ENABLED
#define WPP_LEVEL_ENABLED(lvl) (WPP_CONTROL(WPP_BIT_ ## DUMMY).Level >= lvl)
#endif

#else // WPP_USE_TRACE_LEVELS

// For historical reasons, the use of LEVEL means flags by default.
// This was a bad choice but very difficult to undo.
#ifndef WPP_LEVEL_LOGGER
#  define WPP_LEVEL_LOGGER(CTL)  (WPP_CONTROL(WPP_BIT_ ## CTL).Logger),
#endif
#ifndef WPP_LEVEL_ENABLED
#  define WPP_LEVEL_ENABLED(CTL) (WPP_CONTROL(WPP_BIT_ ## CTL).Flags[WPP_FLAG_NO(WPP_BIT_ ## CTL)] & WPP_MASK(WPP_BIT_ ## CTL))
#endif

#endif // WPP_USE_TRACE_LEVELS

// Define default WPP_FLAG_LOGGER/WPP_FLAG_ENABLED macros for convenience in
// defining a function that takes a FLAG parameter e.g. DoTrace(FLAG).
#ifndef WPP_FLAG_LOGGER
#  define WPP_FLAG_LOGGER(CTL)  (WPP_CONTROL(WPP_BIT_ ## CTL).Logger),
#endif
#ifndef WPP_FLAG_ENABLED
#  define WPP_FLAG_ENABLED(CTL) (WPP_CONTROL(WPP_BIT_ ## CTL).Flags[WPP_FLAG_NO(WPP_BIT_ ## CTL)] & WPP_MASK(WPP_BIT_ ## CTL))
#endif

#ifndef WPP_ENABLED
#  define WPP_ENABLED() 1
#endif
#ifndef WPP_LOGGER
#  define WPP_LOGGER() (WPP_CB[0].Control.Logger),
#endif

#endif // WPP_NO_CONTROL_GUIDS

#ifndef WPP_GET_LOGGER
#  define WPP_GET_LOGGER Logger
#endif

#ifndef WPP_LOGGER_ARG
#  define WPP_LOGGER_ARG TRACEHANDLE Logger,
#endif

#ifdef __cplusplus
} // extern "C"
#endif

#endif // WPP_ALREADY_INCLUDED

// template tracemacro.tpl

// This template expects:
//      WPP_THIS_FILE defined (see header.tpl)
//      WPP_LOGGER_ARG  defined
//      WPP_GET_LOGGER  defined
//      WPP_ENABLED() defined

#ifdef __cplusplus
extern "C" {
#endif

#ifdef WPP_ALREADY_INCLUDED

#undef WPP_LOCAL_TraceGuids
#undef WPP_INVOKE_WPP_DEBUG

#else // WPP_ALREADY_INCLUDED

#ifndef NO_CHECK_FOR_NULL_STRING
#ifndef WPP_CHECK_FOR_NULL_STRING
#define WPP_CHECK_FOR_NULL_STRING
#endif
#endif // NO_CHECK_FOR_NULL_STRING

#define WPP_FLATTEN(...) __VA_ARGS__
#define WPP_GLUE5(a, b, c, d, e)  a ## b ## c ## d ## e
#define WPP_XGLUE5(a, b, c, d, e)  WPP_GLUE5(a, b, c, d, e)
#define WPP_(Id) WPP_XGLUE5(WPP_, Id, _, WPP_THIS_FILE, __LINE__)

#ifndef WPP_INLINE
#define WPP_INLINE DECLSPEC_NOINLINE __inline
#endif

#ifndef WPP_FORCEINLINE
#define WPP_FORCEINLINE __forceinline
#endif

#endif // WPP_ALREADY_INCLUDED

#ifdef WPP_NO_ANNOTATIONS

#define WPP_ANNOTATE(x)

#else // WPP_NO_ANNOTATIONS

#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c70
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c83
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c107
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c119
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c123
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c128
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c143
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c150
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c154
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c161
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c164
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c167
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c171
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c191
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c209
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c221
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c223
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c315
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c325
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c334
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c342
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c347
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c374
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c385
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c392
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c430
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c466
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c474
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c512
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c516
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c519
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c529
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c535
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c541
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c546
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c551
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c555
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c571
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c577
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c588
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c594
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c598
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c604
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c610
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c618
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c632
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c642
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c655
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c666
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c712
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c726
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c731
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c739
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c751
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c805
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c825
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c848
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c864
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c875
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c890
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c900
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c917
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c922
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c931
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dma_engine_c947
#endif
#ifdef WPP_EMIT_FUNC_NAME
#define WPP_FUNC_NAME L" FUNC=" _WPPW(__FUNCTION__)
#else // WPP_EMIT_FUNC_NAME
#define WPP_FUNC_NAME
#endif // WPP_EMIT_FUNC_NAME

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c70_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 10 \"%0WdfCommonBufferCreate failed: %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_INIT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c70_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 10 \"%0WdfCommonBufferCreate failed: %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_INIT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c70
# define WPP_ANNOTATE_dma_engine_c70 WPP_ANNOTATE_dma_engine_c70_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemNTSTATUS -- 10" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c70
# define WPP_ANNOTATE_dma_engine_c70 WPP_ANNOTATE_dma_engine_c70_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c70", \
    L"{", \
    L"status, ItemNTSTATUS -- 10" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c70

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c83_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 11 \"%0descriptor buffer at 0x%10!08x!%11!08x!, size=%12!I64d!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=DBG_INIT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c83_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 11 \"%0descriptor buffer at 0x%10!08x!%11!08x!, size=%12!I64d!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=DBG_INIT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c83
# define WPP_ANNOTATE_dma_engine_c83 WPP_ANNOTATE_dma_engine_c83_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemLong -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLongLong -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c83
# define WPP_ANNOTATE_dma_engine_c83 WPP_ANNOTATE_dma_engine_c83_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c83", \
    L"{", \
    L"engine->sgdma->firstDescHi, ItemLong -- 10" , \
    L"engine->sgdma->firstDescLo, ItemLong -- 11" , \
    L"bufferSize, ItemLongLong -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c83

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c107_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 12 \"%0engineIrqBitMask=0x%10!08x!, intEnableMask=0x%11!08x!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=DBG_INIT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c107_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 12 \"%0engineIrqBitMask=0x%10!08x!, intEnableMask=0x%11!08x!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=DBG_INIT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c107
# define WPP_ANNOTATE_dma_engine_c107 WPP_ANNOTATE_dma_engine_c107_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemLong -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c107
# define WPP_ANNOTATE_dma_engine_c107 WPP_ANNOTATE_dma_engine_c107_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c107", \
    L"{", \
    L"engine->irqBitMask, ItemLong -- 10" , \
    L"engine->regs->intEnableMask, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c107

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c119_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 13 \"%0engine=NULL\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c119_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 13 \"%0engine=NULL\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c119
# define WPP_ANNOTATE_dma_engine_c119 WPP_ANNOTATE_dma_engine_c119_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c119
# define WPP_ANNOTATE_dma_engine_c119 WPP_ANNOTATE_dma_engine_c119_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c119", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c119

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c123_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 14 \"%0%10!s!_%11!u! processing transfer completion\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c123_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 14 \"%0%10!s!_%11!u! processing transfer completion\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c123
# define WPP_ANNOTATE_dma_engine_c123 WPP_ANNOTATE_dma_engine_c123_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c123
# define WPP_ANNOTATE_dma_engine_c123 WPP_ANNOTATE_dma_engine_c123_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c123", \
    L"{", \
    L"DirectionToString(engine->dir), ItemString -- 10" , \
    L"engine->channel, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c123

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c128_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 15 \"%0Interrupt but no request pending?\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c128_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 15 \"%0Interrupt but no request pending?\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c128
# define WPP_ANNOTATE_dma_engine_c128 WPP_ANNOTATE_dma_engine_c128_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c128
# define WPP_ANNOTATE_dma_engine_c128 WPP_ANNOTATE_dma_engine_c128_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c128", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c128

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c143_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 16 \"%0%10!s!_%11!u! transaction%12!s!complete, bytesTransferred=%13!I64u!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c143_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 16 \"%0%10!s!_%11!u! transaction%12!s!complete, bytesTransferred=%13!I64u!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c143
# define WPP_ANNOTATE_dma_engine_c143 WPP_ANNOTATE_dma_engine_c143_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemString -- 12" , \
    L"Arg, ItemULongLong -- 13" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c143
# define WPP_ANNOTATE_dma_engine_c143 WPP_ANNOTATE_dma_engine_c143_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c143", \
    L"{", \
    L"DirectionToString(engine->dir), ItemString -- 10" , \
    L"engine->channel, ItemLong -- 11" , \
    L"completed ? ' ' : ' in', ItemString -- 12" , \
    L"bytesTransferred, ItemULongLong -- 13" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c143

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c150_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 17 \"%0WdfRequestUnmarkCancelable failed: %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c150_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 17 \"%0WdfRequestUnmarkCancelable failed: %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c150
# define WPP_ANNOTATE_dma_engine_c150 WPP_ANNOTATE_dma_engine_c150_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemNTSTATUS -- 10" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c150
# define WPP_ANNOTATE_dma_engine_c150 WPP_ANNOTATE_dma_engine_c150_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c150", \
    L"{", \
    L"status, ItemNTSTATUS -- 10" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c150

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c154_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 18 \"%0WdfDmaTransactionRelease failed: %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c154_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 18 \"%0WdfDmaTransactionRelease failed: %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c154
# define WPP_ANNOTATE_dma_engine_c154 WPP_ANNOTATE_dma_engine_c154_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemNTSTATUS -- 10" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c154
# define WPP_ANNOTATE_dma_engine_c154 WPP_ANNOTATE_dma_engine_c154_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c154", \
    L"{", \
    L"status, ItemNTSTATUS -- 10" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c154

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c161_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 19 \"%0Engine Still Busy, Descriptors Completed=%10!u!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c161_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 19 \"%0Engine Still Busy, Descriptors Completed=%10!u!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c161
# define WPP_ANNOTATE_dma_engine_c161 WPP_ANNOTATE_dma_engine_c161_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemLong -- 10" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c161
# define WPP_ANNOTATE_dma_engine_c161 WPP_ANNOTATE_dma_engine_c161_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c161", \
    L"{", \
    L"engine->regs->completedDescCount, ItemLong -- 10" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c161

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c164_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 20 \"%0Unexpected engine status 0x%10!08x!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c164_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 20 \"%0Unexpected engine status 0x%10!08x!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c164
# define WPP_ANNOTATE_dma_engine_c164 WPP_ANNOTATE_dma_engine_c164_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemLong -- 10" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c164
# define WPP_ANNOTATE_dma_engine_c164 WPP_ANNOTATE_dma_engine_c164_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c164", \
    L"{", \
    L"engineStatus, ItemLong -- 10" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c164

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c167_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 21 \"%0WdfRequestUnmarkCancelable failed: %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c167_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 21 \"%0WdfRequestUnmarkCancelable failed: %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c167
# define WPP_ANNOTATE_dma_engine_c167 WPP_ANNOTATE_dma_engine_c167_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemNTSTATUS -- 10" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c167
# define WPP_ANNOTATE_dma_engine_c167 WPP_ANNOTATE_dma_engine_c167_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c167", \
    L"{", \
    L"status, ItemNTSTATUS -- 10" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c167

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c171_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 22 \"%0WdfDmaTransactionRelease failed: %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c171_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 22 \"%0WdfDmaTransactionRelease failed: %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c171
# define WPP_ANNOTATE_dma_engine_c171 WPP_ANNOTATE_dma_engine_c171_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemNTSTATUS -- 10" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c171
# define WPP_ANNOTATE_dma_engine_c171 WPP_ANNOTATE_dma_engine_c171_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c171", \
    L"{", \
    L"status, ItemNTSTATUS -- 10" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c171

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c191_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 23 \"%0descriptor={.control=0x%10!08X!, .numBytes=%11!u!, srcAddr=0x%12!08X!%13!08X!, .dstAddr=0x%14!08X!%15!08X!, nextAddr=0x%16!08X!%17!08X!}\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=DBG_DESC" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c191_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 23 \"%0descriptor={.control=0x%10!08X!, .numBytes=%11!u!, srcAddr=0x%12!08X!%13!08X!, .dstAddr=0x%14!08X!%15!08X!, nextAddr=0x%16!08X!%17!08X!}\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=DBG_DESC" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c191
# define WPP_ANNOTATE_dma_engine_c191 WPP_ANNOTATE_dma_engine_c191_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemLong -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"Arg, ItemLong -- 13" , \
    L"Arg, ItemLong -- 14" , \
    L"Arg, ItemLong -- 15" , \
    L"Arg, ItemLong -- 16" , \
    L"Arg, ItemLong -- 17" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c191
# define WPP_ANNOTATE_dma_engine_c191 WPP_ANNOTATE_dma_engine_c191_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c191", \
    L"{", \
    L"desc->control, ItemLong -- 10" , \
    L"desc->numBytes, ItemLong -- 11" , \
    L"desc->srcAddrHi, ItemLong -- 12" , \
    L"desc->srcAddrLo, ItemLong -- 13" , \
    L"desc->dstAddrHi, ItemLong -- 14" , \
    L"desc->dstAddrLo, ItemLong -- 15" , \
    L"desc->nextHi, ItemLong -- 16" , \
    L"desc->nextLo, ItemLong -- 17" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c191

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c209_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 24 \"%0misalignment detected! dataWidth=%10!u!, src=0x%11!08I64x!, dst=0x%12!08I64x!, bytes=%13!I64u!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_DESC" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c209_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 24 \"%0misalignment detected! dataWidth=%10!u!, src=0x%11!08I64x!, dst=0x%12!08I64x!, bytes=%13!I64u!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_DESC" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c209
# define WPP_ANNOTATE_dma_engine_c209 WPP_ANNOTATE_dma_engine_c209_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemLong -- 10" , \
    L"Arg, ItemLongLongX -- 11" , \
    L"Arg, ItemLongLongX -- 12" , \
    L"Arg, ItemULongLong -- 13" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c209
# define WPP_ANNOTATE_dma_engine_c209 WPP_ANNOTATE_dma_engine_c209_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c209", \
    L"{", \
    L"dataPathWidth, ItemLong -- 10" , \
    L"desc->srcAddrLo, ItemLongLongX -- 11" , \
    L"desc->dstAddrLo, ItemLongLongX -- 12" , \
    L"desc->numBytes, ItemULongLong -- 13" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c209

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c221_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 25 \"%0descriptor alignments: src=0x%10!08I64x!, dst=0x%11!08I64x!, bytes=%12!I64u!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=DBG_DESC" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c221_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 25 \"%0descriptor alignments: src=0x%10!08I64x!, dst=0x%11!08I64x!, bytes=%12!I64u!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=DBG_DESC" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c221
# define WPP_ANNOTATE_dma_engine_c221 WPP_ANNOTATE_dma_engine_c221_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemLongLongX -- 10" , \
    L"Arg, ItemLongLongX -- 11" , \
    L"Arg, ItemULongLong -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c221
# define WPP_ANNOTATE_dma_engine_c221 WPP_ANNOTATE_dma_engine_c221_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c221", \
    L"{", \
    L"desc->srcAddrLo, ItemLongLongX -- 10" , \
    L"desc->dstAddrLo, ItemLongLongX -- 11" , \
    L"desc->numBytes, ItemULongLong -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c221

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c223_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 26 \"%0misalignment detected! src?=%10!u! dst?=%11!u! length?=%12!u!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_DESC" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c223_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 26 \"%0misalignment detected! src?=%10!u! dst?=%11!u! length?=%12!u!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_DESC" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c223
# define WPP_ANNOTATE_dma_engine_c223 WPP_ANNOTATE_dma_engine_c223_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemLong -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c223
# define WPP_ANNOTATE_dma_engine_c223 WPP_ANNOTATE_dma_engine_c223_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c223", \
    L"{", \
    L"srcAddrMisaligned, ItemLong -- 10" , \
    L"dstAddrMisaligned, ItemLong -- 11" , \
    L"lengthMisaligned, ItemLong -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c223

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c315_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 27 \"%0EngineCreatePollWriteBackBuffer() failed: %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_INIT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c315_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 27 \"%0EngineCreatePollWriteBackBuffer() failed: %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_INIT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c315
# define WPP_ANNOTATE_dma_engine_c315 WPP_ANNOTATE_dma_engine_c315_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemNTSTATUS -- 10" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c315
# define WPP_ANNOTATE_dma_engine_c315 WPP_ANNOTATE_dma_engine_c315_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c315", \
    L"{", \
    L"status, ItemNTSTATUS -- 10" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c315

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c325_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 28 \"%0EngineCreateDescriptorBuffer() failed: %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_INIT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c325_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 28 \"%0EngineCreateDescriptorBuffer() failed: %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_INIT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c325
# define WPP_ANNOTATE_dma_engine_c325 WPP_ANNOTATE_dma_engine_c325_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemNTSTATUS -- 10" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c325
# define WPP_ANNOTATE_dma_engine_c325 WPP_ANNOTATE_dma_engine_c325_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c325", \
    L"{", \
    L"status, ItemNTSTATUS -- 10" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c325

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c334_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 29 \"%0WdfDmaTransactionCreate() failed: %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_INIT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c334_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 29 \"%0WdfDmaTransactionCreate() failed: %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_INIT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c334
# define WPP_ANNOTATE_dma_engine_c334 WPP_ANNOTATE_dma_engine_c334_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemNTSTATUS -- 10" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c334
# define WPP_ANNOTATE_dma_engine_c334 WPP_ANNOTATE_dma_engine_c334_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c334", \
    L"{", \
    L"status, ItemNTSTATUS -- 10" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c334

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c342_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 30 \"%0EngineCreateStreamBuffers() failed: %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_INIT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c342_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 30 \"%0EngineCreateStreamBuffers() failed: %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_INIT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c342
# define WPP_ANNOTATE_dma_engine_c342 WPP_ANNOTATE_dma_engine_c342_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemNTSTATUS -- 10" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c342
# define WPP_ANNOTATE_dma_engine_c342 WPP_ANNOTATE_dma_engine_c342_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c342", \
    L"{", \
    L"status, ItemNTSTATUS -- 10" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c342

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c347_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 31 \"%0creditModeEnable=0x%10!x!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=DBG_INIT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c347_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 31 \"%0creditModeEnable=0x%10!x!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=DBG_INIT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c347
# define WPP_ANNOTATE_dma_engine_c347 WPP_ANNOTATE_dma_engine_c347_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemLong -- 10" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c347
# define WPP_ANNOTATE_dma_engine_c347 WPP_ANNOTATE_dma_engine_c347_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c347", \
    L"{", \
    L"engine->parentDevice->sgdmaRegs->creditModeEnable, ItemLong -- 10" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c347

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c374_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 32 \"%0engine[%10!u!][%11!u!] alignments: bytes=%12!u!, granularity=%13!u!, addrBits=%14!u!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=DBG_INIT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c374_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 32 \"%0engine[%10!u!][%11!u!] alignments: bytes=%12!u!, granularity=%13!u!, addrBits=%14!u!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=DBG_INIT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c374
# define WPP_ANNOTATE_dma_engine_c374 WPP_ANNOTATE_dma_engine_c374_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemLong -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"Arg, ItemLong -- 13" , \
    L"Arg, ItemLong -- 14" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c374
# define WPP_ANNOTATE_dma_engine_c374 WPP_ANNOTATE_dma_engine_c374_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c374", \
    L"{", \
    L"engine->channel, ItemLong -- 10" , \
    L"engine->dir, ItemLong -- 11" , \
    L"engine->alignAddr, ItemLong -- 12" , \
    L"engine->alignLength, ItemLong -- 13" , \
    L"engine->alignAddrBits, ItemLong -- 14" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c374

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c385_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 33 \"%0%10!s!_%11!u! engine status cleared after next read\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c385_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 33 \"%0%10!s!_%11!u! engine status cleared after next read\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c385
# define WPP_ANNOTATE_dma_engine_c385 WPP_ANNOTATE_dma_engine_c385_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c385
# define WPP_ANNOTATE_dma_engine_c385 WPP_ANNOTATE_dma_engine_c385_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c385", \
    L"{", \
    L"DirectionToString(engine->dir), ItemString -- 10" , \
    L"engine->channel, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c385

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c392_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 34 \"%0%10!s!_%11!u! status=0x%12!08x! (%13!s!%14!s!%15!s!%16!s!%17!s!%18!s!%19!s!%20!s!%21!s!)\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c392_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 34 \"%0%10!s!_%11!u! status=0x%12!08x! (%13!s!%14!s!%15!s!%16!s!%17!s!%18!s!%19!s!%20!s!%21!s!)\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c392
# define WPP_ANNOTATE_dma_engine_c392 WPP_ANNOTATE_dma_engine_c392_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"Arg, ItemString -- 13" , \
    L"Arg, ItemString -- 14" , \
    L"Arg, ItemString -- 15" , \
    L"Arg, ItemString -- 16" , \
    L"Arg, ItemString -- 17" , \
    L"Arg, ItemString -- 18" , \
    L"Arg, ItemString -- 19" , \
    L"Arg, ItemString -- 20" , \
    L"Arg, ItemString -- 21" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c392
# define WPP_ANNOTATE_dma_engine_c392 WPP_ANNOTATE_dma_engine_c392_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c392", \
    L"{", \
    L"DirectionToString(engine->dir), ItemString -- 10" , \
    L"engine->channel, ItemLong -- 11" , \
    L"status, ItemLong -- 12" , \
    L"(status & XDMA_BUSY_BIT) ? 'BUSY ' : 'IDLE ', ItemString -- 13" , \
    L"(status & XDMA_DESCRIPTOR_STOPPED_BIT) ? 'DESCRIPTOR_STOPPED ' : ' ', ItemString -- 14" , \
    L"(status & XDMA_DESCRIPTOR_COMPLETED_BIT) ? 'DESCRIPTOR_COMPLETED ' : ' ', ItemString -- 15" , \
    L"(status & XDMA_ALIGN_MISMATCH_BIT) ? 'ALIGN_MISMATCH ' : ' ', ItemString -- 16" , \
    L"(status & XDMA_MAGIC_STOPPED_BIT) ? 'MAGIC_STOPPED ' : ' ', ItemString -- 17" , \
    L"(status & XDMA_FETCH_STOPPED_BIT) ? 'FETCH_STOPPED' : ' ', ItemString -- 18" , \
    L"(status & XDMA_STAT_READ_ERROR) ? 'READ_ERROR ' : ' ', ItemString -- 19" , \
    L"(status & XDMA_STAT_DESCRIPTOR_ERROR) ? 'DESCRIPTOR_ERROR ' : ' ', ItemString -- 20" , \
    L"(status & XDMA_IDLE_STOPPED_BIT) ? 'IDLE_STOPPED' : ' ', ItemString -- 21" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c392

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c430_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 35 \"%0device addr=%10!I64d!, num descriptors=%11!d!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c430_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 35 \"%0device addr=%10!I64d!, num descriptors=%11!d!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c430
# define WPP_ANNOTATE_dma_engine_c430 WPP_ANNOTATE_dma_engine_c430_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemLongLong -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c430
# define WPP_ANNOTATE_dma_engine_c430 WPP_ANNOTATE_dma_engine_c430_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c430", \
    L"{", \
    L"deviceOffset, ItemLongLong -- 10" , \
    L"SgList->NumberOfElements, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c430

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c466_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 36 \"%0descriptor[i].control=0x%10!08x!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c466_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 36 \"%0descriptor[i].control=0x%10!08x!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c466
# define WPP_ANNOTATE_dma_engine_c466 WPP_ANNOTATE_dma_engine_c466_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemLong -- 10" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c466
# define WPP_ANNOTATE_dma_engine_c466 WPP_ANNOTATE_dma_engine_c466_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c466", \
    L"{", \
    L"descriptor[i].control, ItemLong -- 10" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c466

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c474_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 37 \"%0Error: Dma Transfer is not aligned\" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c474_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 37 \"%0Error: Dma Transfer is not aligned\" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c474
# define WPP_ANNOTATE_dma_engine_c474 WPP_ANNOTATE_dma_engine_c474_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c474
# define WPP_ANNOTATE_dma_engine_c474 WPP_ANNOTATE_dma_engine_c474_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c474", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c474

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c512_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 38 \"%0EngineCreate failed! %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_INIT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c512_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 38 \"%0EngineCreate failed! %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_INIT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c512
# define WPP_ANNOTATE_dma_engine_c512 WPP_ANNOTATE_dma_engine_c512_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemNTSTATUS -- 10" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c512
# define WPP_ANNOTATE_dma_engine_c512 WPP_ANNOTATE_dma_engine_c512_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c512", \
    L"{", \
    L"status, ItemNTSTATUS -- 10" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c512

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c516_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 39 \"%0%10!s!_%11!u! engine created (AXI-%12!s!)\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=DBG_INIT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c516_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 39 \"%0%10!s!_%11!u! engine created (AXI-%12!s!)\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=DBG_INIT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c516
# define WPP_ANNOTATE_dma_engine_c516 WPP_ANNOTATE_dma_engine_c516_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemString -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c516
# define WPP_ANNOTATE_dma_engine_c516 WPP_ANNOTATE_dma_engine_c516_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c516", \
    L"{", \
    L"DirectionToString(dir), ItemString -- 10" , \
    L"ch, ItemLong -- 11" , \
    L"engine->type == EngineType_ST ? 'ST' : 'MM', ItemString -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c516

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c519_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 40 \"%0Skipping non-existing engine %10!s!_%11!u!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=DBG_INIT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c519_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 40 \"%0Skipping non-existing engine %10!s!_%11!u!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=DBG_INIT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c519
# define WPP_ANNOTATE_dma_engine_c519 WPP_ANNOTATE_dma_engine_c519_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c519
# define WPP_ANNOTATE_dma_engine_c519 WPP_ANNOTATE_dma_engine_c519_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c519", \
    L"{", \
    L"DirectionToString(dir), ItemString -- 10" , \
    L"ch, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c519

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c529_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 41 \"%0%10!s!_%11!u! engine started (control=0x%12!08x!)\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c529_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 41 \"%0%10!s!_%11!u! engine started (control=0x%12!08x!)\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c529
# define WPP_ANNOTATE_dma_engine_c529 WPP_ANNOTATE_dma_engine_c529_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c529
# define WPP_ANNOTATE_dma_engine_c529 WPP_ANNOTATE_dma_engine_c529_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c529", \
    L"{", \
    L"DirectionToString(engine->dir), ItemString -- 10" , \
    L"engine->channel, ItemLong -- 11" , \
    L"engine->regs->control, ItemLong -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c529

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c535_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 42 \"%0%10!s!_%11!u! engine stopped (control=0x%12!08x!)\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c535_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 42 \"%0%10!s!_%11!u! engine stopped (control=0x%12!08x!)\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c535
# define WPP_ANNOTATE_dma_engine_c535 WPP_ANNOTATE_dma_engine_c535_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c535
# define WPP_ANNOTATE_dma_engine_c535 WPP_ANNOTATE_dma_engine_c535_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c535", \
    L"{", \
    L"DirectionToString(engine->dir), ItemString -- 10" , \
    L"engine->channel, ItemLong -- 11" , \
    L"engine->regs->control, ItemLong -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c535

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c541_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 43 \"%0engine ptr is NULL!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_IRQ" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c541_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 43 \"%0engine ptr is NULL!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_IRQ" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c541
# define WPP_ANNOTATE_dma_engine_c541 WPP_ANNOTATE_dma_engine_c541_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c541
# define WPP_ANNOTATE_dma_engine_c541 WPP_ANNOTATE_dma_engine_c541_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c541", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c541

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c546_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 44 \"%0%10!s!_%11!u! enabled interrupt\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=DBG_IRQ" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c546_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 44 \"%0%10!s!_%11!u! enabled interrupt\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=DBG_IRQ" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c546
# define WPP_ANNOTATE_dma_engine_c546 WPP_ANNOTATE_dma_engine_c546_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c546
# define WPP_ANNOTATE_dma_engine_c546 WPP_ANNOTATE_dma_engine_c546_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c546", \
    L"{", \
    L"DirectionToString(engine->dir), ItemString -- 10" , \
    L"engine->channel, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c546

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c551_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 45 \"%0engine ptr is NULL\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_IRQ" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c551_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 45 \"%0engine ptr is NULL\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_IRQ" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c551
# define WPP_ANNOTATE_dma_engine_c551 WPP_ANNOTATE_dma_engine_c551_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c551
# define WPP_ANNOTATE_dma_engine_c551 WPP_ANNOTATE_dma_engine_c551_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c551", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c551

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c555_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 46 \"%0%10!s!_%11!u! disabled interrupt\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=DBG_IRQ" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c555_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 46 \"%0%10!s!_%11!u! disabled interrupt\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=DBG_IRQ" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c555
# define WPP_ANNOTATE_dma_engine_c555 WPP_ANNOTATE_dma_engine_c555_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c555
# define WPP_ANNOTATE_dma_engine_c555 WPP_ANNOTATE_dma_engine_c555_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c555", \
    L"{", \
    L"DirectionToString(engine->dir), ItemString -- 10" , \
    L"engine->channel, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c555

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c571_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 47 \"%0WdfCommonBufferCreate failed: %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_INIT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c571_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 47 \"%0WdfCommonBufferCreate failed: %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_INIT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c571
# define WPP_ANNOTATE_dma_engine_c571 WPP_ANNOTATE_dma_engine_c571_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemNTSTATUS -- 10" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c571
# define WPP_ANNOTATE_dma_engine_c571 WPP_ANNOTATE_dma_engine_c571_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c571", \
    L"{", \
    L"status, ItemNTSTATUS -- 10" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c571

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c577_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 48 \"%0engine[%10!u!][%11!u!] dma result buffer @ pa=0x%12!08I64x!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=DBG_INIT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c577_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 48 \"%0engine[%10!u!][%11!u!] dma result buffer @ pa=0x%12!08I64x!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=DBG_INIT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c577
# define WPP_ANNOTATE_dma_engine_c577 WPP_ANNOTATE_dma_engine_c577_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemLong -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLongLongX -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c577
# define WPP_ANNOTATE_dma_engine_c577 WPP_ANNOTATE_dma_engine_c577_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c577", \
    L"{", \
    L"engine->channel, ItemLong -- 10" , \
    L"engine->dir, ItemLong -- 11" , \
    L"WdfCommonBufferGetAlignedLogicalAddress(engine->ring.results).QuadPart, ItemLongLongX -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c577

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c588_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 49 \"%0MmAllocatePagesForMdlEx failed!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_INIT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c588_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 49 \"%0MmAllocatePagesForMdlEx failed!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_INIT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c588
# define WPP_ANNOTATE_dma_engine_c588 WPP_ANNOTATE_dma_engine_c588_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c588
# define WPP_ANNOTATE_dma_engine_c588 WPP_ANNOTATE_dma_engine_c588_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c588", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c588

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c594_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 50 \"%0MmMapLockedPagesSpecifyCache failed!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_INIT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c594_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 50 \"%0MmMapLockedPagesSpecifyCache failed!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_INIT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c594
# define WPP_ANNOTATE_dma_engine_c594 WPP_ANNOTATE_dma_engine_c594_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c594
# define WPP_ANNOTATE_dma_engine_c594 WPP_ANNOTATE_dma_engine_c594_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c594", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c594

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c598_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 51 \"%0mdl VA=%10!p!, byteCount=%11!u!, next=%12!p!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=DBG_INIT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c598_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 51 \"%0mdl VA=%10!p!, byteCount=%11!u!, next=%12!p!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=DBG_INIT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c598
# define WPP_ANNOTATE_dma_engine_c598 WPP_ANNOTATE_dma_engine_c598_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemPtr -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemPtr -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c598
# define WPP_ANNOTATE_dma_engine_c598 WPP_ANNOTATE_dma_engine_c598_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c598", \
    L"{", \
    L"rxBufferVa, ItemPtr -- 10" , \
    L"MmGetMdlByteCount(mdl), ItemLong -- 11" , \
    L"mdl->Next, ItemPtr -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c598

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c604_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 52 \"%0IoAllocateMdl failed!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_INIT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c604_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 52 \"%0IoAllocateMdl failed!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_INIT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c604
# define WPP_ANNOTATE_dma_engine_c604 WPP_ANNOTATE_dma_engine_c604_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c604
# define WPP_ANNOTATE_dma_engine_c604 WPP_ANNOTATE_dma_engine_c604_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c604", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c604

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c610_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 53 \"%0sub-mdl VA=%10!p!, byteCount=%11!u!, next=%12!p!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=DBG_INIT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c610_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 53 \"%0sub-mdl VA=%10!p!, byteCount=%11!u!, next=%12!p!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=DBG_INIT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c610
# define WPP_ANNOTATE_dma_engine_c610 WPP_ANNOTATE_dma_engine_c610_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemPtr -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemPtr -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c610
# define WPP_ANNOTATE_dma_engine_c610 WPP_ANNOTATE_dma_engine_c610_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c610", \
    L"{", \
    L"MmGetMdlVirtualAddress(engine->ring.mdl[i]), ItemPtr -- 10" , \
    L"MmGetMdlByteCount(engine->ring.mdl[i]), ItemLong -- 11" , \
    L"engine->ring.mdl[i]->Next, ItemPtr -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c610

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c618_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 54 \"%0WdfSpinLockCreate failed: %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_INIT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c618_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 54 \"%0WdfSpinLockCreate failed: %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_INIT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c618
# define WPP_ANNOTATE_dma_engine_c618 WPP_ANNOTATE_dma_engine_c618_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemNTSTATUS -- 10" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c618
# define WPP_ANNOTATE_dma_engine_c618 WPP_ANNOTATE_dma_engine_c618_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c618", \
    L"{", \
    L"status, ItemNTSTATUS -- 10" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c618

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c632_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 55 \"%0Engine error during transfer! 0x%10!08x!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c632_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 55 \"%0Engine error during transfer! 0x%10!08x!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c632
# define WPP_ANNOTATE_dma_engine_c632 WPP_ANNOTATE_dma_engine_c632_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemLong -- 10" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c632
# define WPP_ANNOTATE_dma_engine_c632 WPP_ANNOTATE_dma_engine_c632_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c632", \
    L"{", \
    L"engineStatus, ItemLong -- 10" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c632

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c642_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 56 \"%0%10!s!_%11!u! ring head=%12!u!, tail=%13!u!, eop=%14!u!, credits=%15!u!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c642_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 56 \"%0%10!s!_%11!u! ring head=%12!u!, tail=%13!u!, eop=%14!u!, credits=%15!u!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c642
# define WPP_ANNOTATE_dma_engine_c642 WPP_ANNOTATE_dma_engine_c642_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"Arg, ItemLong -- 13" , \
    L"Arg, ItemLong -- 14" , \
    L"Arg, ItemLong -- 15" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c642
# define WPP_ANNOTATE_dma_engine_c642 WPP_ANNOTATE_dma_engine_c642_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c642", \
    L"{", \
    L"DirectionToString(engine->dir), ItemString -- 10" , \
    L"engine->channel, ItemLong -- 11" , \
    L"head, ItemLong -- 12" , \
    L"tail, ItemLong -- 13" , \
    L"eopCount, ItemLong -- 14" , \
    L"engine->sgdma->descCredits, ItemLong -- 15" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c642

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c655_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 57 \"%0%10!s!_%11!u! ring head=%12!u!, tail=%13!u!, eop=%14!u!, credits=%15!u!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c655_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 57 \"%0%10!s!_%11!u! ring head=%12!u!, tail=%13!u!, eop=%14!u!, credits=%15!u!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c655
# define WPP_ANNOTATE_dma_engine_c655 WPP_ANNOTATE_dma_engine_c655_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"Arg, ItemLong -- 13" , \
    L"Arg, ItemLong -- 14" , \
    L"Arg, ItemLong -- 15" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c655
# define WPP_ANNOTATE_dma_engine_c655 WPP_ANNOTATE_dma_engine_c655_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c655", \
    L"{", \
    L"DirectionToString(engine->dir), ItemString -- 10" , \
    L"engine->channel, ItemLong -- 11" , \
    L"head, ItemLong -- 12" , \
    L"tail, ItemLong -- 13" , \
    L"eopCount, ItemLong -- 14" , \
    L"engine->sgdma->descCredits, ItemLong -- 15" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c655

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c666_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 58 \"%0starting engine queue\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c666_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 58 \"%0starting engine queue\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c666
# define WPP_ANNOTATE_dma_engine_c666 WPP_ANNOTATE_dma_engine_c666_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c666
# define WPP_ANNOTATE_dma_engine_c666 WPP_ANNOTATE_dma_engine_c666_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c666", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c666

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c712_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 59 \"%0Error: Dma Transfer is not aligned\" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c712_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 59 \"%0Error: Dma Transfer is not aligned\" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c712
# define WPP_ANNOTATE_dma_engine_c712 WPP_ANNOTATE_dma_engine_c712_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c712
# define WPP_ANNOTATE_dma_engine_c712 WPP_ANNOTATE_dma_engine_c712_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c712", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c712

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c726_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 60 \"%0first desc @ 0x%10!08x!%11!08x!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c726_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 60 \"%0first desc @ 0x%10!08x!%11!08x!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c726
# define WPP_ANNOTATE_dma_engine_c726 WPP_ANNOTATE_dma_engine_c726_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemLong -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c726
# define WPP_ANNOTATE_dma_engine_c726 WPP_ANNOTATE_dma_engine_c726_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c726", \
    L"{", \
    L"engine->sgdma->firstDescHi, ItemLong -- 10" , \
    L"engine->sgdma->firstDescLo, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c726

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c731_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 61 \"%0last desc points to 0x%10!08x!%11!08x!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c731_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 61 \"%0last desc points to 0x%10!08x!%11!08x!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c731
# define WPP_ANNOTATE_dma_engine_c731 WPP_ANNOTATE_dma_engine_c731_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemLong -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c731
# define WPP_ANNOTATE_dma_engine_c731 WPP_ANNOTATE_dma_engine_c731_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c731", \
    L"{", \
    L"last->nextHi, ItemLong -- 10" , \
    L"last->nextLo, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c731

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c739_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 62 \"%0%10!s!_%11!u! set %12!u! initial descriptor credits\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c739_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 62 \"%0%10!s!_%11!u! set %12!u! initial descriptor credits\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c739
# define WPP_ANNOTATE_dma_engine_c739 WPP_ANNOTATE_dma_engine_c739_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c739
# define WPP_ANNOTATE_dma_engine_c739 WPP_ANNOTATE_dma_engine_c739_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c739", \
    L"{", \
    L"DirectionToString(engine->dir), ItemString -- 10" , \
    L"engine->channel, ItemLong -- 11" , \
    L"engine->sgdma->descCredits, ItemLong -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c739

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c751_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 63 \"%0clearing DMA results...\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c751_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 63 \"%0clearing DMA results...\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c751
# define WPP_ANNOTATE_dma_engine_c751 WPP_ANNOTATE_dma_engine_c751_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c751
# define WPP_ANNOTATE_dma_engine_c751 WPP_ANNOTATE_dma_engine_c751_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c751", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c751

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c805_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 64 \"%0%10!s!_%11!u! head=%12!u!, tail=%13!u!, credits=%14!u!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c805_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 64 \"%0%10!s!_%11!u! head=%12!u!, tail=%13!u!, credits=%14!u!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c805
# define WPP_ANNOTATE_dma_engine_c805 WPP_ANNOTATE_dma_engine_c805_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"Arg, ItemLong -- 13" , \
    L"Arg, ItemLong -- 14" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c805
# define WPP_ANNOTATE_dma_engine_c805 WPP_ANNOTATE_dma_engine_c805_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c805", \
    L"{", \
    L"DirectionToString(engine->dir), ItemString -- 10" , \
    L"engine->channel, ItemLong -- 11" , \
    L"head, ItemLong -- 12" , \
    L"tail, ItemLong -- 13" , \
    L"engine->sgdma->descCredits, ItemLong -- 14" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c805

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c825_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 65 \"%0WdfMemoryCopyFromBuffer failed: %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c825_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 65 \"%0WdfMemoryCopyFromBuffer failed: %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c825
# define WPP_ANNOTATE_dma_engine_c825 WPP_ANNOTATE_dma_engine_c825_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemNTSTATUS -- 10" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c825
# define WPP_ANNOTATE_dma_engine_c825 WPP_ANNOTATE_dma_engine_c825_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c825", \
    L"{", \
    L"status, ItemNTSTATUS -- 10" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c825

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c848_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 66 \"%0%10!s!_%11!u! read %12!I64u!B available,  head=%13!u!, tail=%14!u!, credits=%15!u!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c848_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 66 \"%0%10!s!_%11!u! read %12!I64u!B available,  head=%13!u!, tail=%14!u!, credits=%15!u!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c848
# define WPP_ANNOTATE_dma_engine_c848 WPP_ANNOTATE_dma_engine_c848_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemULongLong -- 12" , \
    L"Arg, ItemLong -- 13" , \
    L"Arg, ItemLong -- 14" , \
    L"Arg, ItemLong -- 15" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c848
# define WPP_ANNOTATE_dma_engine_c848 WPP_ANNOTATE_dma_engine_c848_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c848", \
    L"{", \
    L"DirectionToString(engine->dir), ItemString -- 10" , \
    L"engine->channel, ItemLong -- 11" , \
    L"*bytesRead, ItemULongLong -- 12" , \
    L"head, ItemLong -- 13" , \
    L"tail, ItemLong -- 14" , \
    L"engine->sgdma->descCredits, ItemLong -- 15" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c848

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c864_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 67 \"%0WdfCommonBufferCreate failed: %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_INIT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c864_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 67 \"%0WdfCommonBufferCreate failed: %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_INIT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c864
# define WPP_ANNOTATE_dma_engine_c864 WPP_ANNOTATE_dma_engine_c864_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemNTSTATUS -- 10" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c864
# define WPP_ANNOTATE_dma_engine_c864 WPP_ANNOTATE_dma_engine_c864_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c864", \
    L"{", \
    L"status, ItemNTSTATUS -- 10" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c864

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c875_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 68 \"%0poll wb buffer at 0x%10!08x!%11!08x!, size=%12!I64d!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=DBG_INIT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c875_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 68 \"%0poll wb buffer at 0x%10!08x!%11!08x!, size=%12!I64d!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=DBG_INIT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c875
# define WPP_ANNOTATE_dma_engine_c875 WPP_ANNOTATE_dma_engine_c875_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemLong -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLongLong -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c875
# define WPP_ANNOTATE_dma_engine_c875 WPP_ANNOTATE_dma_engine_c875_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c875", \
    L"{", \
    L"engine->regs->pollModeWbHi, ItemLong -- 10" , \
    L"engine->regs->pollModeWbLo, ItemLong -- 11" , \
    L"sizeof(XDMA_POLL_WB), ItemLongLong -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c875

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c890_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 69 \"%0error on writeback %10!u!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c890_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 69 \"%0error on writeback %10!u!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c890
# define WPP_ANNOTATE_dma_engine_c890 WPP_ANNOTATE_dma_engine_c890_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemLong -- 10" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c890
# define WPP_ANNOTATE_dma_engine_c890 WPP_ANNOTATE_dma_engine_c890_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c890", \
    L"{", \
    L"actual, ItemLong -- 10" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c890

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c900_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 70 \"%0%10!u! descriptors completed\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c900_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 70 \"%0%10!u! descriptors completed\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c900
# define WPP_ANNOTATE_dma_engine_c900 WPP_ANNOTATE_dma_engine_c900_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemLong -- 10" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c900
# define WPP_ANNOTATE_dma_engine_c900 WPP_ANNOTATE_dma_engine_c900_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c900", \
    L"{", \
    L"actual, ItemLong -- 10" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c900

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c917_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 71 \"%0error on writeback %10!u!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c917_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 71 \"%0error on writeback %10!u!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c917
# define WPP_ANNOTATE_dma_engine_c917 WPP_ANNOTATE_dma_engine_c917_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemLong -- 10" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c917
# define WPP_ANNOTATE_dma_engine_c917 WPP_ANNOTATE_dma_engine_c917_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c917", \
    L"{", \
    L"completed, ItemLong -- 10" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c917

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c922_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 72 \"%0complete=%10!u!, eop=%11!u!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c922_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 72 \"%0complete=%10!u!, eop=%11!u!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c922
# define WPP_ANNOTATE_dma_engine_c922 WPP_ANNOTATE_dma_engine_c922_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemLong -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c922
# define WPP_ANNOTATE_dma_engine_c922 WPP_ANNOTATE_dma_engine_c922_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c922", \
    L"{", \
    L"completed, ItemLong -- 10" , \
    L"eopCount, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c922

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c931_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 73 \"%0complete=%10!u!, eop=%11!u!, tryCount=%12!u!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c931_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 73 \"%0complete=%10!u!, eop=%11!u!, tryCount=%12!u!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c931
# define WPP_ANNOTATE_dma_engine_c931 WPP_ANNOTATE_dma_engine_c931_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemLong -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c931
# define WPP_ANNOTATE_dma_engine_c931 WPP_ANNOTATE_dma_engine_c931_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c931", \
    L"{", \
    L"completed, ItemLong -- 10" , \
    L"eopCount, ItemLong -- 11" , \
    L"tryCount, ItemLong -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c931

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c947_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 74 \"%0cycleCount=0x%10!08x!%11!08x! dataCount=0x%12!08x!%13!08x! pendingCount=0x%14!08x!%15!08x!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dma_engine_c947_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"fd3fca4c-b43c-3465-89d1-2dad18476021 libxdma // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 74 \"%0cycleCount=0x%10!08x!%11!08x! dataCount=0x%12!08x!%13!08x! pendingCount=0x%14!08x!%15!08x!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=DBG_DMA" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dma_engine_c947
# define WPP_ANNOTATE_dma_engine_c947 WPP_ANNOTATE_dma_engine_c947_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemLong -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"Arg, ItemLong -- 13" , \
    L"Arg, ItemLong -- 14" , \
    L"Arg, ItemLong -- 15" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dma_engine_c947
# define WPP_ANNOTATE_dma_engine_c947 WPP_ANNOTATE_dma_engine_c947_FINAL( \
    "TMF:", \
    "dma_engine.c", \
    "dma_engine_c947", \
    L"{", \
    L"engine->regs->perfCycHi, ItemLong -- 10" , \
    L"engine->regs->perfCycLo, ItemLong -- 11" , \
    L"engine->regs->perfDatHi, ItemLong -- 12" , \
    L"engine->regs->perfDatLo, ItemLong -- 13" , \
    L"engine->regs->perfPndHi, ItemLong -- 14" , \
    L"engine->regs->perfPndLo, ItemLong -- 15" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dma_engine_c947

# define WPP_ANNOTATE(x) WPP_ANNOTATE_ ## x,

#endif // WPP_NO_ANNOTATIONS

#ifdef WPP_USER_MSG_GUID

#define WPP_LOCAL_MSG_VAR(Guid) WPP_XGLUE3(WPP_, WPP_GUID_NORM Guid, _Traceguids)

#define WPP_LOCAL_MSG_GUID(Guid) \
extern const __declspec(selectany) GUID WPP_LOCAL_MSG_VAR(Guid)[] = { WPP_GUID_STRUCT Guid }

WPP_LOCAL_MSG_GUID(WPP_USER_MSG_GUID);
#define WPP_LOCAL_TraceGuids WPP_LOCAL_MSG_VAR(WPP_USER_MSG_GUID)

#else // WPP_USER_MSG_GUID

#define WPP_LOCAL_TraceGuids WPP_fd3fca4cb43c346589d12dad18476021_Traceguids
extern const __declspec(selectany) GUID WPP_LOCAL_TraceGuids[] = { {0xfd3fca4c,0xb43c,0x3465,{0x89,0xd1,0x2d,0xad,0x18,0x47,0x60,0x21}}, };

#endif // WPP_USER_MSG_GUID

#ifndef WPP_ALREADY_INCLUDED

#ifndef WPP_TRACE_OPTIONS
enum { WPP_TRACE_OPTIONS =
    TRACE_MESSAGE_SEQUENCE   |
    TRACE_MESSAGE_GUID       |
    TRACE_MESSAGE_SYSTEMINFO |
    TRACE_MESSAGE_TIMESTAMP };
#endif // WPP_TRACE_OPTIONS

#ifndef WPP_LOGPAIR_SEPARATOR
# define WPP_LOGPAIR_SEPARATOR ,
#endif
#ifndef WPP_LOGPAIR_SIZET
# define WPP_LOGPAIR_SIZET SIZE_T
#endif
#ifndef WPP_LOGPAIR
# define WPP_LOGPAIR(_Size, _Addr)     (_Addr),((WPP_LOGPAIR_SIZET)(_Size))WPP_LOGPAIR_SEPARATOR
#endif

#define WPP_LOGTYPEVAL(_Type, _Value) WPP_LOGPAIR(sizeof(_Type), &(_Value))
#define WPP_LOGTYPEPTR(_Value)        WPP_LOGPAIR(sizeof(*(_Value)), (_Value))

// Marshalling macros.

#ifndef WPP_LOGASTR
# ifdef WPP_CHECK_FOR_NULL_STRING
#  define WPP_LOGASTR(_value)  WPP_LOGPAIR( \
    (_value) ? strlen(_value) + 1 : 5, \
    (_value) ?       (_value)     : "NULL" )
# else // WPP_CHECK_FOR_NULL_STRING
#  define WPP_LOGASTR(_value)  WPP_LOGPAIR( \
    strlen(_value) + 1, \
    _value )
# endif // WPP_CHECK_FOR_NULL_STRING
#endif // WPP_LOGASTR

#ifndef WPP_LOGWSTR
# ifdef WPP_CHECK_FOR_NULL_STRING
#  define WPP_LOGWSTR(_value)  WPP_LOGPAIR( \
    ((_value) ? wcslen(_value) + 1 : 5) * sizeof(WCHAR), \
     (_value) ?       (_value)     : L"NULL" )
# else // WPP_CHECK_FOR_NULL_STRING
#  define WPP_LOGWSTR(_value)  WPP_LOGPAIR( \
    (wcslen(_value) + 1) * sizeof(WCHAR), \
    _value )
# endif // WPP_CHECK_FOR_NULL_STRING
#endif // WPP_LOGWSTR

#ifndef WPP_LOGPGUID
# define WPP_LOGPGUID(_value) WPP_LOGPAIR( sizeof(GUID), (_value) )
#endif // WPP_LOGPGUID

#ifndef WPP_LOGPSID
# ifdef WPP_CHECK_FOR_NULL_STRING
# define WPP_LOGPSID(_value)  WPP_LOGPAIR( \
    (_value) && WPP_IsValidSid(_value) ? WPP_GetLengthSid(_value) : 5, \
    (_value) && WPP_IsValidSid(_value) ? (_value) : (void const*)"NULL")
# else // WPP_CHECK_FOR_NULL_STRING
# define WPP_LOGPSID(_value)  WPP_LOGPAIR( \
    WPP_GetLengthSid(_value), \
    (_value) )
#endif // WPP_CHECK_FOR_NULL_STRING
#endif // WPP_LOGPSID

#ifndef WPP_LOGCSTR
# define WPP_LOGCSTR(_x) \
    WPP_LOGPAIR( sizeof(USHORT),      &(_x).Length ) \
    WPP_LOGPAIR( (USHORT)(_x).Length, (USHORT)(_x).Length ? (_x).Buffer : "" )
#endif // WPP_LOGCSTR

#ifndef WPP_LOGUSTR
# define WPP_LOGUSTR(_x) \
    WPP_LOGPAIR( sizeof(USHORT),      &(_x).Length ) \
    WPP_LOGPAIR( (USHORT)(_x).Length, (USHORT)(_x).Length ? (_x).Buffer : L"" )
#endif // WPP_LOGUSTR

#ifndef WPP_LOGPUSTR
#ifdef WPP_CHECK_FOR_NULL_STRING
# define WPP_LOGPUSTR(_x) \
    WPP_LOGPAIR( \
        sizeof(USHORT), \
        (_x) ? &(_x)->Length : (void const*)L"\x08" ) \
    WPP_LOGPAIR( \
        (_x)                         ? (USHORT)(_x)->Length : 0x08, \
        (_x) && (USHORT)(_x)->Length ? (_x)->Buffer         : L"NULL" )
#else // WPP_CHECK_FOR_NULL_STRING
# define WPP_LOGPUSTR(_x) WPP_LOGUSTR(*(_x))
#endif // WPP_CHECK_FOR_NULL_STRING
#endif // WPP_LOGPUSTR

#ifndef WPP_LOGPCSTR
#ifdef WPP_CHECK_FOR_NULL_STRING
# define WPP_LOGPCSTR(_x) \
    WPP_LOGPAIR( \
        sizeof(USHORT), \
        (_x) ? &(_x)->Length : (void const*)L"\x04" ) \
    WPP_LOGPAIR( \
        (_x)                         ? (USHORT)(_x)->Length : 0x04, \
        (_x) && (USHORT)(_x)->Length ? (_x)->Buffer         : "NULL" )
#else // WPP_CHECK_FOR_NULL_STRING
# define WPP_LOGPCSTR(_x) WPP_LOGCSTR(*(_x))
#endif // WPP_CHECK_FOR_NULL_STRING
#endif // WPP_LOGPCSTR

#ifdef __cplusplus

#ifndef WPP_POINTER_TO_USHORT
struct WppPointerToUshort
{
    USHORT m_val;
    WPP_FORCEINLINE explicit WppPointerToUshort(USHORT val) : m_val(val) {}
    WPP_FORCEINLINE USHORT const* get() const { return &m_val; }
};
#define WPP_POINTER_TO_USHORT(val) (WppPointerToUshort((val)).get())
#endif // WPP_POINTER_TO_USHORT

#ifndef WPP_LOGCPPSTR
#define WPP_LOGCPPSTR(_value) \
    WPP_LOGPAIR( \
        sizeof(USHORT), \
        WPP_POINTER_TO_USHORT((USHORT)((_value).size()*sizeof(*(_value).c_str()))) ) \
    WPP_LOGPAIR( \
        (USHORT)((_value).size()*sizeof(*(_value).c_str())), \
        (_value).c_str() )
#endif // WPP_LOGCPPSTR

#ifndef WPP_LOGCPPVEC
#define WPP_LOGCPPVEC(_value) \
    WPP_LOGPAIR( \
        sizeof(USHORT), \
        WPP_POINTER_TO_USHORT((USHORT)((_value).size()*sizeof(*(_value).data()))) ) \
    WPP_LOGPAIR( \
        (USHORT)((_value).size()*sizeof(*(_value).data())), \
        (_value).data() + ((_value).data() == NULL) )
#endif // WPP_LOGCPPVEC

#endif // __cplusplus

#ifndef WPP_BINARY_def
# define WPP_BINARY_def
typedef struct tagWPP_BINARY
{
    _Field_size_bytes_(Length) void const* Buffer;
    USHORT Length;
} WPP_BINARY;
#endif // WPP_BINARY_def

#ifndef WPP_BINARY_func
# define WPP_BINARY_func
WPP_FORCEINLINE WPP_BINARY
WppBinary(_In_reads_bytes_(Length) void const* Buffer, USHORT Length)
{
    WPP_BINARY data;
    data.Buffer = Buffer;
    data.Length = Length;
    return data;
}
#endif // WPP_BINARY_func

#endif // WPP_ALREADY_INCLUDED

#ifndef WPP_ENABLE_FLAG_BIT
#define WPP_ENABLE_FLAG_BIT(flag) (WPP_CB[((flag) >> 16)].Control).Flags[( (0xFFFF & ((flag)-1) ) / 32)] & (1 << ( ((flag)-1) & 31 ))
#endif

#ifndef WPP_SF__def
# define WPP_SF__def
WPP_INLINE void WPP_SF_(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id,  (void*)0); }
#endif // WPP_SF__def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_ function
//
#ifndef WPP_RECORDER_AND_TRACE_SF__def
#define WPP_RECORDER_AND_TRACE_SF__def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                    (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id,  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF__def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_ function
//
#ifndef WPP_RECORDER_SF__def
#define WPP_RECORDER_SF__def
WPP_INLINE
VOID
WPP_RECORDER_SF_(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
             (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id,  (void*)0);
}
#endif // WPP_RECORDER_SF__def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_D_def
# define WPP_SF_D_def
WPP_INLINE void WPP_SF_D(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, unsigned int _a1)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGTYPEVAL(unsigned int, _a1)  (void*)0); }
#endif // WPP_SF_D_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_D function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_D_def
#define WPP_RECORDER_AND_TRACE_SF_D_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_D(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , unsigned int _a1
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGTYPEVAL(unsigned int, _a1)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(unsigned int, _a1)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_D_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_D function
//
#ifndef WPP_RECORDER_SF_D_def
#define WPP_RECORDER_SF_D_def
WPP_INLINE
VOID
WPP_RECORDER_SF_D(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , unsigned int _a1
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGTYPEVAL(unsigned int, _a1)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(unsigned int, _a1)  (void*)0);
}
#endif // WPP_RECORDER_SF_D_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_DD_def
# define WPP_SF_DD_def
WPP_INLINE void WPP_SF_DD(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, unsigned int _a1, unsigned int _a2)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGTYPEVAL(unsigned int, _a1) WPP_LOGTYPEVAL(unsigned int, _a2)  (void*)0); }
#endif // WPP_SF_DD_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_DD function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_DD_def
#define WPP_RECORDER_AND_TRACE_SF_DD_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_DD(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , unsigned int _a1, unsigned int _a2
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGTYPEVAL(unsigned int, _a1) WPP_LOGTYPEVAL(unsigned int, _a2)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(unsigned int, _a1) WPP_LOGTYPEVAL(unsigned int, _a2)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_DD_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_DD function
//
#ifndef WPP_RECORDER_SF_DD_def
#define WPP_RECORDER_SF_DD_def
WPP_INLINE
VOID
WPP_RECORDER_SF_DD(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , unsigned int _a1, unsigned int _a2
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGTYPEVAL(unsigned int, _a1) WPP_LOGTYPEVAL(unsigned int, _a2)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(unsigned int, _a1) WPP_LOGTYPEVAL(unsigned int, _a2)  (void*)0);
}
#endif // WPP_RECORDER_SF_DD_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_DDD_def
# define WPP_SF_DDD_def
WPP_INLINE void WPP_SF_DDD(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, unsigned int _a1, unsigned int _a2, unsigned int _a3)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGTYPEVAL(unsigned int, _a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3)  (void*)0); }
#endif // WPP_SF_DDD_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_DDD function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_DDD_def
#define WPP_RECORDER_AND_TRACE_SF_DDD_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_DDD(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , unsigned int _a1, unsigned int _a2, unsigned int _a3
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGTYPEVAL(unsigned int, _a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(unsigned int, _a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_DDD_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_DDD function
//
#ifndef WPP_RECORDER_SF_DDD_def
#define WPP_RECORDER_SF_DDD_def
WPP_INLINE
VOID
WPP_RECORDER_SF_DDD(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , unsigned int _a1, unsigned int _a2, unsigned int _a3
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGTYPEVAL(unsigned int, _a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(unsigned int, _a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3)  (void*)0);
}
#endif // WPP_RECORDER_SF_DDD_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_DDDDD_def
# define WPP_SF_DDDDD_def
WPP_INLINE void WPP_SF_DDDDD(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, unsigned int _a1, unsigned int _a2, unsigned int _a3, unsigned int _a4, unsigned int _a5)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGTYPEVAL(unsigned int, _a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3) WPP_LOGTYPEVAL(unsigned int, _a4) WPP_LOGTYPEVAL(unsigned int, _a5)  (void*)0); }
#endif // WPP_SF_DDDDD_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_DDDDD function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_DDDDD_def
#define WPP_RECORDER_AND_TRACE_SF_DDDDD_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_DDDDD(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , unsigned int _a1, unsigned int _a2, unsigned int _a3, unsigned int _a4, unsigned int _a5
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGTYPEVAL(unsigned int, _a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3) WPP_LOGTYPEVAL(unsigned int, _a4) WPP_LOGTYPEVAL(unsigned int, _a5)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(unsigned int, _a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3) WPP_LOGTYPEVAL(unsigned int, _a4) WPP_LOGTYPEVAL(unsigned int, _a5)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_DDDDD_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_DDDDD function
//
#ifndef WPP_RECORDER_SF_DDDDD_def
#define WPP_RECORDER_SF_DDDDD_def
WPP_INLINE
VOID
WPP_RECORDER_SF_DDDDD(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , unsigned int _a1, unsigned int _a2, unsigned int _a3, unsigned int _a4, unsigned int _a5
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGTYPEVAL(unsigned int, _a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3) WPP_LOGTYPEVAL(unsigned int, _a4) WPP_LOGTYPEVAL(unsigned int, _a5)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(unsigned int, _a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3) WPP_LOGTYPEVAL(unsigned int, _a4) WPP_LOGTYPEVAL(unsigned int, _a5)  (void*)0);
}
#endif // WPP_RECORDER_SF_DDDDD_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_DDDDDD_def
# define WPP_SF_DDDDDD_def
WPP_INLINE void WPP_SF_DDDDDD(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, unsigned int _a1, unsigned int _a2, unsigned int _a3, unsigned int _a4, unsigned int _a5, unsigned int _a6)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGTYPEVAL(unsigned int, _a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3) WPP_LOGTYPEVAL(unsigned int, _a4) WPP_LOGTYPEVAL(unsigned int, _a5) WPP_LOGTYPEVAL(unsigned int, _a6)  (void*)0); }
#endif // WPP_SF_DDDDDD_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_DDDDDD function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_DDDDDD_def
#define WPP_RECORDER_AND_TRACE_SF_DDDDDD_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_DDDDDD(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , unsigned int _a1, unsigned int _a2, unsigned int _a3, unsigned int _a4, unsigned int _a5, unsigned int _a6
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGTYPEVAL(unsigned int, _a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3) WPP_LOGTYPEVAL(unsigned int, _a4) WPP_LOGTYPEVAL(unsigned int, _a5) WPP_LOGTYPEVAL(unsigned int, _a6)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(unsigned int, _a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3) WPP_LOGTYPEVAL(unsigned int, _a4) WPP_LOGTYPEVAL(unsigned int, _a5) WPP_LOGTYPEVAL(unsigned int, _a6)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_DDDDDD_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_DDDDDD function
//
#ifndef WPP_RECORDER_SF_DDDDDD_def
#define WPP_RECORDER_SF_DDDDDD_def
WPP_INLINE
VOID
WPP_RECORDER_SF_DDDDDD(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , unsigned int _a1, unsigned int _a2, unsigned int _a3, unsigned int _a4, unsigned int _a5, unsigned int _a6
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGTYPEVAL(unsigned int, _a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3) WPP_LOGTYPEVAL(unsigned int, _a4) WPP_LOGTYPEVAL(unsigned int, _a5) WPP_LOGTYPEVAL(unsigned int, _a6)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(unsigned int, _a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3) WPP_LOGTYPEVAL(unsigned int, _a4) WPP_LOGTYPEVAL(unsigned int, _a5) WPP_LOGTYPEVAL(unsigned int, _a6)  (void*)0);
}
#endif // WPP_RECORDER_SF_DDDDDD_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_DDDDDDDD_def
# define WPP_SF_DDDDDDDD_def
WPP_INLINE void WPP_SF_DDDDDDDD(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, unsigned int _a1, unsigned int _a2, unsigned int _a3, unsigned int _a4, unsigned int _a5, unsigned int _a6, unsigned int _a7, unsigned int _a8)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGTYPEVAL(unsigned int, _a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3) WPP_LOGTYPEVAL(unsigned int, _a4) WPP_LOGTYPEVAL(unsigned int, _a5) WPP_LOGTYPEVAL(unsigned int, _a6) WPP_LOGTYPEVAL(unsigned int, _a7) WPP_LOGTYPEVAL(unsigned int, _a8)  (void*)0); }
#endif // WPP_SF_DDDDDDDD_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_DDDDDDDD function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_DDDDDDDD_def
#define WPP_RECORDER_AND_TRACE_SF_DDDDDDDD_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_DDDDDDDD(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , unsigned int _a1, unsigned int _a2, unsigned int _a3, unsigned int _a4, unsigned int _a5, unsigned int _a6, unsigned int _a7, unsigned int _a8
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGTYPEVAL(unsigned int, _a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3) WPP_LOGTYPEVAL(unsigned int, _a4) WPP_LOGTYPEVAL(unsigned int, _a5) WPP_LOGTYPEVAL(unsigned int, _a6) WPP_LOGTYPEVAL(unsigned int, _a7) WPP_LOGTYPEVAL(unsigned int, _a8)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(unsigned int, _a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3) WPP_LOGTYPEVAL(unsigned int, _a4) WPP_LOGTYPEVAL(unsigned int, _a5) WPP_LOGTYPEVAL(unsigned int, _a6) WPP_LOGTYPEVAL(unsigned int, _a7) WPP_LOGTYPEVAL(unsigned int, _a8)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_DDDDDDDD_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_DDDDDDDD function
//
#ifndef WPP_RECORDER_SF_DDDDDDDD_def
#define WPP_RECORDER_SF_DDDDDDDD_def
WPP_INLINE
VOID
WPP_RECORDER_SF_DDDDDDDD(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , unsigned int _a1, unsigned int _a2, unsigned int _a3, unsigned int _a4, unsigned int _a5, unsigned int _a6, unsigned int _a7, unsigned int _a8
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGTYPEVAL(unsigned int, _a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3) WPP_LOGTYPEVAL(unsigned int, _a4) WPP_LOGTYPEVAL(unsigned int, _a5) WPP_LOGTYPEVAL(unsigned int, _a6) WPP_LOGTYPEVAL(unsigned int, _a7) WPP_LOGTYPEVAL(unsigned int, _a8)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(unsigned int, _a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3) WPP_LOGTYPEVAL(unsigned int, _a4) WPP_LOGTYPEVAL(unsigned int, _a5) WPP_LOGTYPEVAL(unsigned int, _a6) WPP_LOGTYPEVAL(unsigned int, _a7) WPP_LOGTYPEVAL(unsigned int, _a8)  (void*)0);
}
#endif // WPP_RECORDER_SF_DDDDDDDD_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_DDi_def
# define WPP_SF_DDi_def
WPP_INLINE void WPP_SF_DDi(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, unsigned int _a1, unsigned int _a2, signed __int64 _a3)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGTYPEVAL(unsigned int, _a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed __int64, _a3)  (void*)0); }
#endif // WPP_SF_DDi_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_DDi function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_DDi_def
#define WPP_RECORDER_AND_TRACE_SF_DDi_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_DDi(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , unsigned int _a1, unsigned int _a2, signed __int64 _a3
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGTYPEVAL(unsigned int, _a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed __int64, _a3)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(unsigned int, _a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed __int64, _a3)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_DDi_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_DDi function
//
#ifndef WPP_RECORDER_SF_DDi_def
#define WPP_RECORDER_SF_DDi_def
WPP_INLINE
VOID
WPP_RECORDER_SF_DDi(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , unsigned int _a1, unsigned int _a2, signed __int64 _a3
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGTYPEVAL(unsigned int, _a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed __int64, _a3)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(unsigned int, _a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed __int64, _a3)  (void*)0);
}
#endif // WPP_RECORDER_SF_DDi_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_DiiI_def
# define WPP_SF_DiiI_def
WPP_INLINE void WPP_SF_DiiI(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, unsigned int _a1, signed __int64 _a2, signed __int64 _a3, unsigned __int64 _a4)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGTYPEVAL(unsigned int, _a1) WPP_LOGTYPEVAL(signed __int64, _a2) WPP_LOGTYPEVAL(signed __int64, _a3) WPP_LOGTYPEVAL(unsigned __int64, _a4)  (void*)0); }
#endif // WPP_SF_DiiI_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_DiiI function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_DiiI_def
#define WPP_RECORDER_AND_TRACE_SF_DiiI_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_DiiI(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , unsigned int _a1, signed __int64 _a2, signed __int64 _a3, unsigned __int64 _a4
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGTYPEVAL(unsigned int, _a1) WPP_LOGTYPEVAL(signed __int64, _a2) WPP_LOGTYPEVAL(signed __int64, _a3) WPP_LOGTYPEVAL(unsigned __int64, _a4)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(unsigned int, _a1) WPP_LOGTYPEVAL(signed __int64, _a2) WPP_LOGTYPEVAL(signed __int64, _a3) WPP_LOGTYPEVAL(unsigned __int64, _a4)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_DiiI_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_DiiI function
//
#ifndef WPP_RECORDER_SF_DiiI_def
#define WPP_RECORDER_SF_DiiI_def
WPP_INLINE
VOID
WPP_RECORDER_SF_DiiI(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , unsigned int _a1, signed __int64 _a2, signed __int64 _a3, unsigned __int64 _a4
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGTYPEVAL(unsigned int, _a1) WPP_LOGTYPEVAL(signed __int64, _a2) WPP_LOGTYPEVAL(signed __int64, _a3) WPP_LOGTYPEVAL(unsigned __int64, _a4)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(unsigned int, _a1) WPP_LOGTYPEVAL(signed __int64, _a2) WPP_LOGTYPEVAL(signed __int64, _a3) WPP_LOGTYPEVAL(unsigned __int64, _a4)  (void*)0);
}
#endif // WPP_RECORDER_SF_DiiI_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_d_def
# define WPP_SF_d_def
WPP_INLINE void WPP_SF_d(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, signed int _a1)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGTYPEVAL(signed int, _a1)  (void*)0); }
#endif // WPP_SF_d_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_d function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_d_def
#define WPP_RECORDER_AND_TRACE_SF_d_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_d(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , signed int _a1
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGTYPEVAL(signed int, _a1)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(signed int, _a1)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_d_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_d function
//
#ifndef WPP_RECORDER_SF_d_def
#define WPP_RECORDER_SF_d_def
WPP_INLINE
VOID
WPP_RECORDER_SF_d(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , signed int _a1
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGTYPEVAL(signed int, _a1)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(signed int, _a1)  (void*)0);
}
#endif // WPP_RECORDER_SF_d_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_id_def
# define WPP_SF_id_def
WPP_INLINE void WPP_SF_id(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, signed __int64 _a1, signed int _a2)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGTYPEVAL(signed __int64, _a1) WPP_LOGTYPEVAL(signed int, _a2)  (void*)0); }
#endif // WPP_SF_id_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_id function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_id_def
#define WPP_RECORDER_AND_TRACE_SF_id_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_id(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , signed __int64 _a1, signed int _a2
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGTYPEVAL(signed __int64, _a1) WPP_LOGTYPEVAL(signed int, _a2)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(signed __int64, _a1) WPP_LOGTYPEVAL(signed int, _a2)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_id_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_id function
//
#ifndef WPP_RECORDER_SF_id_def
#define WPP_RECORDER_SF_id_def
WPP_INLINE
VOID
WPP_RECORDER_SF_id(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , signed __int64 _a1, signed int _a2
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGTYPEVAL(signed __int64, _a1) WPP_LOGTYPEVAL(signed int, _a2)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(signed __int64, _a1) WPP_LOGTYPEVAL(signed int, _a2)  (void*)0);
}
#endif // WPP_RECORDER_SF_id_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_iiI_def
# define WPP_SF_iiI_def
WPP_INLINE void WPP_SF_iiI(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, signed __int64 _a1, signed __int64 _a2, unsigned __int64 _a3)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGTYPEVAL(signed __int64, _a1) WPP_LOGTYPEVAL(signed __int64, _a2) WPP_LOGTYPEVAL(unsigned __int64, _a3)  (void*)0); }
#endif // WPP_SF_iiI_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_iiI function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_iiI_def
#define WPP_RECORDER_AND_TRACE_SF_iiI_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_iiI(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , signed __int64 _a1, signed __int64 _a2, unsigned __int64 _a3
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGTYPEVAL(signed __int64, _a1) WPP_LOGTYPEVAL(signed __int64, _a2) WPP_LOGTYPEVAL(unsigned __int64, _a3)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(signed __int64, _a1) WPP_LOGTYPEVAL(signed __int64, _a2) WPP_LOGTYPEVAL(unsigned __int64, _a3)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_iiI_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_iiI function
//
#ifndef WPP_RECORDER_SF_iiI_def
#define WPP_RECORDER_SF_iiI_def
WPP_INLINE
VOID
WPP_RECORDER_SF_iiI(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , signed __int64 _a1, signed __int64 _a2, unsigned __int64 _a3
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGTYPEVAL(signed __int64, _a1) WPP_LOGTYPEVAL(signed __int64, _a2) WPP_LOGTYPEVAL(unsigned __int64, _a3)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(signed __int64, _a1) WPP_LOGTYPEVAL(signed __int64, _a2) WPP_LOGTYPEVAL(unsigned __int64, _a3)  (void*)0);
}
#endif // WPP_RECORDER_SF_iiI_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_qDq_def
# define WPP_SF_qDq_def
WPP_INLINE void WPP_SF_qDq(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, const void* _a1, unsigned int _a2, const void* _a3)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGTYPEVAL(const void*, _a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(const void*, _a3)  (void*)0); }
#endif // WPP_SF_qDq_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_qDq function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_qDq_def
#define WPP_RECORDER_AND_TRACE_SF_qDq_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_qDq(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , const void* _a1, unsigned int _a2, const void* _a3
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGTYPEVAL(const void*, _a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(const void*, _a3)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(const void*, _a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(const void*, _a3)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_qDq_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_qDq function
//
#ifndef WPP_RECORDER_SF_qDq_def
#define WPP_RECORDER_SF_qDq_def
WPP_INLINE
VOID
WPP_RECORDER_SF_qDq(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , const void* _a1, unsigned int _a2, const void* _a3
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGTYPEVAL(const void*, _a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(const void*, _a3)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(const void*, _a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(const void*, _a3)  (void*)0);
}
#endif // WPP_RECORDER_SF_qDq_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_sD_def
# define WPP_SF_sD_def
WPP_INLINE void WPP_SF_sD(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, LPCSTR _a1, unsigned int _a2)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2)  (void*)0); }
#endif // WPP_SF_sD_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_sD function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_sD_def
#define WPP_RECORDER_AND_TRACE_SF_sD_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_sD(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_sD_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_sD function
//
#ifndef WPP_RECORDER_SF_sD_def
#define WPP_RECORDER_SF_sD_def
WPP_INLINE
VOID
WPP_RECORDER_SF_sD(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2)  (void*)0);
}
#endif // WPP_RECORDER_SF_sD_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_sDD_def
# define WPP_SF_sDD_def
WPP_INLINE void WPP_SF_sDD(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, LPCSTR _a1, unsigned int _a2, unsigned int _a3)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3)  (void*)0); }
#endif // WPP_SF_sDD_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_sDD function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_sDD_def
#define WPP_RECORDER_AND_TRACE_SF_sDD_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_sDD(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, unsigned int _a3
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_sDD_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_sDD function
//
#ifndef WPP_RECORDER_SF_sDD_def
#define WPP_RECORDER_SF_sDD_def
WPP_INLINE
VOID
WPP_RECORDER_SF_sDD(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, unsigned int _a3
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3)  (void*)0);
}
#endif // WPP_RECORDER_SF_sDD_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_sDDDD_def
# define WPP_SF_sDDDD_def
WPP_INLINE void WPP_SF_sDDDD(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, LPCSTR _a1, unsigned int _a2, unsigned int _a3, unsigned int _a4, unsigned int _a5)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3) WPP_LOGTYPEVAL(unsigned int, _a4) WPP_LOGTYPEVAL(unsigned int, _a5)  (void*)0); }
#endif // WPP_SF_sDDDD_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_sDDDD function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_sDDDD_def
#define WPP_RECORDER_AND_TRACE_SF_sDDDD_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_sDDDD(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, unsigned int _a3, unsigned int _a4, unsigned int _a5
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3) WPP_LOGTYPEVAL(unsigned int, _a4) WPP_LOGTYPEVAL(unsigned int, _a5)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3) WPP_LOGTYPEVAL(unsigned int, _a4) WPP_LOGTYPEVAL(unsigned int, _a5)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_sDDDD_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_sDDDD function
//
#ifndef WPP_RECORDER_SF_sDDDD_def
#define WPP_RECORDER_SF_sDDDD_def
WPP_INLINE
VOID
WPP_RECORDER_SF_sDDDD(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, unsigned int _a3, unsigned int _a4, unsigned int _a5
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3) WPP_LOGTYPEVAL(unsigned int, _a4) WPP_LOGTYPEVAL(unsigned int, _a5)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3) WPP_LOGTYPEVAL(unsigned int, _a4) WPP_LOGTYPEVAL(unsigned int, _a5)  (void*)0);
}
#endif // WPP_RECORDER_SF_sDDDD_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_sDDDDD_def
# define WPP_SF_sDDDDD_def
WPP_INLINE void WPP_SF_sDDDDD(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, LPCSTR _a1, unsigned int _a2, unsigned int _a3, unsigned int _a4, unsigned int _a5, unsigned int _a6)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3) WPP_LOGTYPEVAL(unsigned int, _a4) WPP_LOGTYPEVAL(unsigned int, _a5) WPP_LOGTYPEVAL(unsigned int, _a6)  (void*)0); }
#endif // WPP_SF_sDDDDD_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_sDDDDD function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_sDDDDD_def
#define WPP_RECORDER_AND_TRACE_SF_sDDDDD_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_sDDDDD(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, unsigned int _a3, unsigned int _a4, unsigned int _a5, unsigned int _a6
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3) WPP_LOGTYPEVAL(unsigned int, _a4) WPP_LOGTYPEVAL(unsigned int, _a5) WPP_LOGTYPEVAL(unsigned int, _a6)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3) WPP_LOGTYPEVAL(unsigned int, _a4) WPP_LOGTYPEVAL(unsigned int, _a5) WPP_LOGTYPEVAL(unsigned int, _a6)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_sDDDDD_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_sDDDDD function
//
#ifndef WPP_RECORDER_SF_sDDDDD_def
#define WPP_RECORDER_SF_sDDDDD_def
WPP_INLINE
VOID
WPP_RECORDER_SF_sDDDDD(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, unsigned int _a3, unsigned int _a4, unsigned int _a5, unsigned int _a6
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3) WPP_LOGTYPEVAL(unsigned int, _a4) WPP_LOGTYPEVAL(unsigned int, _a5) WPP_LOGTYPEVAL(unsigned int, _a6)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3) WPP_LOGTYPEVAL(unsigned int, _a4) WPP_LOGTYPEVAL(unsigned int, _a5) WPP_LOGTYPEVAL(unsigned int, _a6)  (void*)0);
}
#endif // WPP_RECORDER_SF_sDDDDD_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_sDDsssssssss_def
# define WPP_SF_sDDsssssssss_def
WPP_INLINE void WPP_SF_sDDsssssssss(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, LPCSTR _a1, unsigned int _a2, unsigned int _a3, LPCSTR _a4, LPCSTR _a5, LPCSTR _a6, LPCSTR _a7, LPCSTR _a8, LPCSTR _a9, LPCSTR _a10, LPCSTR _a11, LPCSTR _a12)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3) WPP_LOGASTR(_a4) WPP_LOGASTR(_a5) WPP_LOGASTR(_a6) WPP_LOGASTR(_a7) WPP_LOGASTR(_a8) WPP_LOGASTR(_a9) WPP_LOGASTR(_a10) WPP_LOGASTR(_a11) WPP_LOGASTR(_a12)  (void*)0); }
#endif // WPP_SF_sDDsssssssss_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_sDDsssssssss function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_sDDsssssssss_def
#define WPP_RECORDER_AND_TRACE_SF_sDDsssssssss_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_sDDsssssssss(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, unsigned int _a3, LPCSTR _a4, LPCSTR _a5, LPCSTR _a6, LPCSTR _a7, LPCSTR _a8, LPCSTR _a9, LPCSTR _a10, LPCSTR _a11, LPCSTR _a12
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3) WPP_LOGASTR(_a4) WPP_LOGASTR(_a5) WPP_LOGASTR(_a6) WPP_LOGASTR(_a7) WPP_LOGASTR(_a8) WPP_LOGASTR(_a9) WPP_LOGASTR(_a10) WPP_LOGASTR(_a11) WPP_LOGASTR(_a12)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3) WPP_LOGASTR(_a4) WPP_LOGASTR(_a5) WPP_LOGASTR(_a6) WPP_LOGASTR(_a7) WPP_LOGASTR(_a8) WPP_LOGASTR(_a9) WPP_LOGASTR(_a10) WPP_LOGASTR(_a11) WPP_LOGASTR(_a12)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_sDDsssssssss_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_sDDsssssssss function
//
#ifndef WPP_RECORDER_SF_sDDsssssssss_def
#define WPP_RECORDER_SF_sDDsssssssss_def
WPP_INLINE
VOID
WPP_RECORDER_SF_sDDsssssssss(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, unsigned int _a3, LPCSTR _a4, LPCSTR _a5, LPCSTR _a6, LPCSTR _a7, LPCSTR _a8, LPCSTR _a9, LPCSTR _a10, LPCSTR _a11, LPCSTR _a12
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3) WPP_LOGASTR(_a4) WPP_LOGASTR(_a5) WPP_LOGASTR(_a6) WPP_LOGASTR(_a7) WPP_LOGASTR(_a8) WPP_LOGASTR(_a9) WPP_LOGASTR(_a10) WPP_LOGASTR(_a11) WPP_LOGASTR(_a12)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3) WPP_LOGASTR(_a4) WPP_LOGASTR(_a5) WPP_LOGASTR(_a6) WPP_LOGASTR(_a7) WPP_LOGASTR(_a8) WPP_LOGASTR(_a9) WPP_LOGASTR(_a10) WPP_LOGASTR(_a11) WPP_LOGASTR(_a12)  (void*)0);
}
#endif // WPP_RECORDER_SF_sDDsssssssss_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_sDIDDD_def
# define WPP_SF_sDIDDD_def
WPP_INLINE void WPP_SF_sDIDDD(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, LPCSTR _a1, unsigned int _a2, unsigned __int64 _a3, unsigned int _a4, unsigned int _a5, unsigned int _a6)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned __int64, _a3) WPP_LOGTYPEVAL(unsigned int, _a4) WPP_LOGTYPEVAL(unsigned int, _a5) WPP_LOGTYPEVAL(unsigned int, _a6)  (void*)0); }
#endif // WPP_SF_sDIDDD_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_sDIDDD function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_sDIDDD_def
#define WPP_RECORDER_AND_TRACE_SF_sDIDDD_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_sDIDDD(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, unsigned __int64 _a3, unsigned int _a4, unsigned int _a5, unsigned int _a6
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned __int64, _a3) WPP_LOGTYPEVAL(unsigned int, _a4) WPP_LOGTYPEVAL(unsigned int, _a5) WPP_LOGTYPEVAL(unsigned int, _a6)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned __int64, _a3) WPP_LOGTYPEVAL(unsigned int, _a4) WPP_LOGTYPEVAL(unsigned int, _a5) WPP_LOGTYPEVAL(unsigned int, _a6)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_sDIDDD_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_sDIDDD function
//
#ifndef WPP_RECORDER_SF_sDIDDD_def
#define WPP_RECORDER_SF_sDIDDD_def
WPP_INLINE
VOID
WPP_RECORDER_SF_sDIDDD(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, unsigned __int64 _a3, unsigned int _a4, unsigned int _a5, unsigned int _a6
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned __int64, _a3) WPP_LOGTYPEVAL(unsigned int, _a4) WPP_LOGTYPEVAL(unsigned int, _a5) WPP_LOGTYPEVAL(unsigned int, _a6)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned __int64, _a3) WPP_LOGTYPEVAL(unsigned int, _a4) WPP_LOGTYPEVAL(unsigned int, _a5) WPP_LOGTYPEVAL(unsigned int, _a6)  (void*)0);
}
#endif // WPP_RECORDER_SF_sDIDDD_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_sDs_def
# define WPP_SF_sDs_def
WPP_INLINE void WPP_SF_sDs(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, LPCSTR _a1, unsigned int _a2, LPCSTR _a3)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGASTR(_a3)  (void*)0); }
#endif // WPP_SF_sDs_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_sDs function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_sDs_def
#define WPP_RECORDER_AND_TRACE_SF_sDs_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_sDs(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, LPCSTR _a3
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGASTR(_a3)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGASTR(_a3)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_sDs_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_sDs function
//
#ifndef WPP_RECORDER_SF_sDs_def
#define WPP_RECORDER_SF_sDs_def
WPP_INLINE
VOID
WPP_RECORDER_SF_sDs(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, LPCSTR _a3
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGASTR(_a3)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGASTR(_a3)  (void*)0);
}
#endif // WPP_RECORDER_SF_sDs_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_sDsI_def
# define WPP_SF_sDsI_def
WPP_INLINE void WPP_SF_sDsI(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, LPCSTR _a1, unsigned int _a2, LPCSTR _a3, unsigned __int64 _a4)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGASTR(_a3) WPP_LOGTYPEVAL(unsigned __int64, _a4)  (void*)0); }
#endif // WPP_SF_sDsI_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_sDsI function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_sDsI_def
#define WPP_RECORDER_AND_TRACE_SF_sDsI_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_sDsI(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, LPCSTR _a3, unsigned __int64 _a4
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGASTR(_a3) WPP_LOGTYPEVAL(unsigned __int64, _a4)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGASTR(_a3) WPP_LOGTYPEVAL(unsigned __int64, _a4)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_sDsI_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_sDsI function
//
#ifndef WPP_RECORDER_SF_sDsI_def
#define WPP_RECORDER_SF_sDsI_def
WPP_INLINE
VOID
WPP_RECORDER_SF_sDsI(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, LPCSTR _a3, unsigned __int64 _a4
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGASTR(_a3) WPP_LOGTYPEVAL(unsigned __int64, _a4)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGASTR(_a3) WPP_LOGTYPEVAL(unsigned __int64, _a4)  (void*)0);
}
#endif // WPP_RECORDER_SF_sDsI_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

// WPP_LOG_ALWAYS:
// Called for each event: WPP_LOG_ALWAYS(EX, MSG, arg1, arg2, arg3...) Other()
// If defined, the definition needs to include a trailing comma or semicolon.
// In addition, you will need to define a WPP_EX_[args](args...) macro to
// extract any needed information from the other arguments (e.g. LEVEL).
#ifndef WPP_LOG_ALWAYS
#define WPP_LOG_ALWAYS(...)
#endif

// WPP_DEBUG:
// Called for each enabled event: WPP_DEBUG((MSG, arg1, arg2, arg3...)), Other()
// Potential definition: printf MsgArgs
// Definition should not include any trailing comma or semicolon.
#ifdef WPP_DEBUG
#define WPP_INVOKE_WPP_DEBUG(MsgArgs) WPP_DEBUG(MsgArgs)
#else // WPP_DEBUG
#define WPP_INVOKE_WPP_DEBUG(MsgArgs) (void)0
#endif // WPP_DEBUG

// WPP_CALL_dma_engine_c70
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c70(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c70) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10)); \
            WPP_RECORDER_AND_TRACE_SF_d( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, FLAGS), \
                     10, \
                     WPP_LOCAL_TraceGuids+0, _a10);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c70(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    WPP_ANNOTATE(dma_engine_c70) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_RECORDER_SF_d( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, FLAGS), \
                10, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c70(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    WPP_ANNOTATE(dma_engine_c70) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_SF_d( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, FLAGS) \
                10, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c83
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c83(FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c83) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_DDi( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, FLAGS), \
                     11, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c83(FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, FLAGS) \
    WPP_ANNOTATE(dma_engine_c83) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_RECORDER_SF_DDi( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, FLAGS), \
                11, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c83(FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, FLAGS) \
    WPP_ANNOTATE(dma_engine_c83) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_SF_DDi( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, FLAGS) \
                11, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c107
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c107(FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c107) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)); \
            WPP_RECORDER_AND_TRACE_SF_DD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, FLAGS), \
                     12, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c107(FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, FLAGS) \
    WPP_ANNOTATE(dma_engine_c107) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)), \
            WPP_RECORDER_SF_DD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, FLAGS), \
                12, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c107(FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, FLAGS) \
    WPP_ANNOTATE(dma_engine_c107) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)), \
            WPP_SF_DD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, FLAGS) \
                12, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c119
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c119(FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c119) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, FLAGS), \
                     13, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c119(FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    WPP_ANNOTATE(dma_engine_c119) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, FLAGS), \
                13, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c119(FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    WPP_ANNOTATE(dma_engine_c119) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, FLAGS) \
                13, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c123
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c123(FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_INFORMATION, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_INFORMATION, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c123) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_INFORMATION, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_INFORMATION, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)); \
            WPP_RECORDER_AND_TRACE_SF_sD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_INFORMATION, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_INFORMATION, FLAGS), \
                     14, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_INFORMATION, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c123(FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_INFORMATION, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_INFORMATION, FLAGS) \
    WPP_ANNOTATE(dma_engine_c123) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_INFORMATION, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)), \
            WPP_RECORDER_SF_sD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_INFORMATION, FLAGS), \
                14, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_INFORMATION, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c123(FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_INFORMATION, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_INFORMATION, FLAGS) \
    WPP_ANNOTATE(dma_engine_c123) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_INFORMATION, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)), \
            WPP_SF_sD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_INFORMATION, FLAGS) \
                14, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_INFORMATION, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c128
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c128(FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_INFORMATION, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_INFORMATION, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c128) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_INFORMATION, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_INFORMATION, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_INFORMATION, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_INFORMATION, FLAGS), \
                     15, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_INFORMATION, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c128(FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_INFORMATION, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_INFORMATION, FLAGS) \
    WPP_ANNOTATE(dma_engine_c128) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_INFORMATION, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_INFORMATION, FLAGS), \
                15, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_INFORMATION, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c128(FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_INFORMATION, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_INFORMATION, FLAGS) \
    WPP_ANNOTATE(dma_engine_c128) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_INFORMATION, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_INFORMATION, FLAGS) \
                15, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_INFORMATION, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c143
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c143(FLAGS, MSG, _a10, _a11, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_INFORMATION, FLAGS), MSG, _a10, _a11, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_INFORMATION, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c143) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_INFORMATION, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_INFORMATION, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12, _a13)); \
            WPP_RECORDER_AND_TRACE_SF_sDsI( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_INFORMATION, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_INFORMATION, FLAGS), \
                     16, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12, _a13);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_INFORMATION, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c143(FLAGS, MSG, _a10, _a11, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_INFORMATION, FLAGS), MSG, _a10, _a11, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_INFORMATION, FLAGS) \
    WPP_ANNOTATE(dma_engine_c143) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_INFORMATION, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12, _a13)), \
            WPP_RECORDER_SF_sDsI( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_INFORMATION, FLAGS), \
                16, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12, _a13), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_INFORMATION, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c143(FLAGS, MSG, _a10, _a11, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_INFORMATION, FLAGS), MSG, _a10, _a11, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_INFORMATION, FLAGS) \
    WPP_ANNOTATE(dma_engine_c143) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_INFORMATION, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12, _a13)), \
            WPP_SF_sDsI( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_INFORMATION, FLAGS) \
                16, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12, _a13), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_INFORMATION, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c150
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c150(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c150) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10)); \
            WPP_RECORDER_AND_TRACE_SF_d( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, FLAGS), \
                     17, \
                     WPP_LOCAL_TraceGuids+0, _a10);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c150(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    WPP_ANNOTATE(dma_engine_c150) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_RECORDER_SF_d( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, FLAGS), \
                17, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c150(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    WPP_ANNOTATE(dma_engine_c150) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_SF_d( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, FLAGS) \
                17, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c154
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c154(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c154) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10)); \
            WPP_RECORDER_AND_TRACE_SF_d( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, FLAGS), \
                     18, \
                     WPP_LOCAL_TraceGuids+0, _a10);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c154(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    WPP_ANNOTATE(dma_engine_c154) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_RECORDER_SF_d( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, FLAGS), \
                18, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c154(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    WPP_ANNOTATE(dma_engine_c154) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_SF_d( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, FLAGS) \
                18, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c161
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c161(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c161) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10)); \
            WPP_RECORDER_AND_TRACE_SF_D( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, FLAGS), \
                     19, \
                     WPP_LOCAL_TraceGuids+0, _a10);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c161(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    WPP_ANNOTATE(dma_engine_c161) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_RECORDER_SF_D( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, FLAGS), \
                19, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c161(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    WPP_ANNOTATE(dma_engine_c161) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_SF_D( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, FLAGS) \
                19, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c164
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c164(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c164) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10)); \
            WPP_RECORDER_AND_TRACE_SF_D( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, FLAGS), \
                     20, \
                     WPP_LOCAL_TraceGuids+0, _a10);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c164(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    WPP_ANNOTATE(dma_engine_c164) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_RECORDER_SF_D( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, FLAGS), \
                20, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c164(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    WPP_ANNOTATE(dma_engine_c164) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_SF_D( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, FLAGS) \
                20, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c167
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c167(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c167) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10)); \
            WPP_RECORDER_AND_TRACE_SF_d( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, FLAGS), \
                     21, \
                     WPP_LOCAL_TraceGuids+0, _a10);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c167(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    WPP_ANNOTATE(dma_engine_c167) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_RECORDER_SF_d( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, FLAGS), \
                21, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c167(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    WPP_ANNOTATE(dma_engine_c167) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_SF_d( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, FLAGS) \
                21, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c171
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c171(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c171) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10)); \
            WPP_RECORDER_AND_TRACE_SF_d( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, FLAGS), \
                     22, \
                     WPP_LOCAL_TraceGuids+0, _a10);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c171(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    WPP_ANNOTATE(dma_engine_c171) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_RECORDER_SF_d( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, FLAGS), \
                22, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c171(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    WPP_ANNOTATE(dma_engine_c171) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_SF_d( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, FLAGS) \
                22, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c191
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c191(FLAGS, MSG, _a10, _a11, _a12, _a13, _a14, _a15, _a16, _a17) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, FLAGS), MSG, _a10, _a11, _a12, _a13, _a14, _a15, _a16, _a17) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c191) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12, _a13, _a14, _a15, _a16, _a17)); \
            WPP_RECORDER_AND_TRACE_SF_DDDDDDDD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, FLAGS), \
                     23, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12, _a13, _a14, _a15, _a16, _a17);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c191(FLAGS, MSG, _a10, _a11, _a12, _a13, _a14, _a15, _a16, _a17) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, FLAGS), MSG, _a10, _a11, _a12, _a13, _a14, _a15, _a16, _a17) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, FLAGS) \
    WPP_ANNOTATE(dma_engine_c191) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12, _a13, _a14, _a15, _a16, _a17)), \
            WPP_RECORDER_SF_DDDDDDDD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, FLAGS), \
                23, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12, _a13, _a14, _a15, _a16, _a17), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c191(FLAGS, MSG, _a10, _a11, _a12, _a13, _a14, _a15, _a16, _a17) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, FLAGS), MSG, _a10, _a11, _a12, _a13, _a14, _a15, _a16, _a17) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, FLAGS) \
    WPP_ANNOTATE(dma_engine_c191) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12, _a13, _a14, _a15, _a16, _a17)), \
            WPP_SF_DDDDDDDD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, FLAGS) \
                23, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12, _a13, _a14, _a15, _a16, _a17), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c209
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c209(FLAGS, MSG, _a10, _a11, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10, _a11, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c209) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12, _a13)); \
            WPP_RECORDER_AND_TRACE_SF_DiiI( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, FLAGS), \
                     24, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12, _a13);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c209(FLAGS, MSG, _a10, _a11, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10, _a11, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    WPP_ANNOTATE(dma_engine_c209) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12, _a13)), \
            WPP_RECORDER_SF_DiiI( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, FLAGS), \
                24, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12, _a13), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c209(FLAGS, MSG, _a10, _a11, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10, _a11, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    WPP_ANNOTATE(dma_engine_c209) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12, _a13)), \
            WPP_SF_DiiI( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, FLAGS) \
                24, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12, _a13), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c221
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c221(FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c221) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_iiI( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, FLAGS), \
                     25, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c221(FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, FLAGS) \
    WPP_ANNOTATE(dma_engine_c221) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_RECORDER_SF_iiI( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, FLAGS), \
                25, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c221(FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, FLAGS) \
    WPP_ANNOTATE(dma_engine_c221) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_SF_iiI( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, FLAGS) \
                25, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c223
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c223(FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c223) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_DDD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, FLAGS), \
                     26, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c223(FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    WPP_ANNOTATE(dma_engine_c223) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_RECORDER_SF_DDD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, FLAGS), \
                26, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c223(FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    WPP_ANNOTATE(dma_engine_c223) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_SF_DDD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, FLAGS) \
                26, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c315
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c315(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c315) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10)); \
            WPP_RECORDER_AND_TRACE_SF_d( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, FLAGS), \
                     27, \
                     WPP_LOCAL_TraceGuids+0, _a10);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c315(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    WPP_ANNOTATE(dma_engine_c315) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_RECORDER_SF_d( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, FLAGS), \
                27, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c315(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    WPP_ANNOTATE(dma_engine_c315) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_SF_d( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, FLAGS) \
                27, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c325
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c325(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c325) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10)); \
            WPP_RECORDER_AND_TRACE_SF_d( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, FLAGS), \
                     28, \
                     WPP_LOCAL_TraceGuids+0, _a10);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c325(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    WPP_ANNOTATE(dma_engine_c325) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_RECORDER_SF_d( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, FLAGS), \
                28, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c325(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    WPP_ANNOTATE(dma_engine_c325) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_SF_d( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, FLAGS) \
                28, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c334
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c334(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c334) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10)); \
            WPP_RECORDER_AND_TRACE_SF_d( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, FLAGS), \
                     29, \
                     WPP_LOCAL_TraceGuids+0, _a10);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c334(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    WPP_ANNOTATE(dma_engine_c334) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_RECORDER_SF_d( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, FLAGS), \
                29, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c334(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    WPP_ANNOTATE(dma_engine_c334) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_SF_d( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, FLAGS) \
                29, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c342
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c342(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c342) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10)); \
            WPP_RECORDER_AND_TRACE_SF_d( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, FLAGS), \
                     30, \
                     WPP_LOCAL_TraceGuids+0, _a10);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c342(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    WPP_ANNOTATE(dma_engine_c342) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_RECORDER_SF_d( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, FLAGS), \
                30, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c342(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    WPP_ANNOTATE(dma_engine_c342) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_SF_d( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, FLAGS) \
                30, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c347
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c347(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_INFORMATION, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_INFORMATION, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c347) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_INFORMATION, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_INFORMATION, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10)); \
            WPP_RECORDER_AND_TRACE_SF_D( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_INFORMATION, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_INFORMATION, FLAGS), \
                     31, \
                     WPP_LOCAL_TraceGuids+0, _a10);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_INFORMATION, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c347(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_INFORMATION, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_INFORMATION, FLAGS) \
    WPP_ANNOTATE(dma_engine_c347) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_INFORMATION, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_RECORDER_SF_D( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_INFORMATION, FLAGS), \
                31, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_INFORMATION, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c347(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_INFORMATION, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_INFORMATION, FLAGS) \
    WPP_ANNOTATE(dma_engine_c347) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_INFORMATION, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_SF_D( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_INFORMATION, FLAGS) \
                31, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_INFORMATION, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c374
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c374(FLAGS, MSG, _a10, _a11, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, FLAGS), MSG, _a10, _a11, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c374) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12, _a13, _a14)); \
            WPP_RECORDER_AND_TRACE_SF_DDDDD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, FLAGS), \
                     32, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12, _a13, _a14);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c374(FLAGS, MSG, _a10, _a11, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, FLAGS), MSG, _a10, _a11, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, FLAGS) \
    WPP_ANNOTATE(dma_engine_c374) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12, _a13, _a14)), \
            WPP_RECORDER_SF_DDDDD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, FLAGS), \
                32, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12, _a13, _a14), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c374(FLAGS, MSG, _a10, _a11, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, FLAGS), MSG, _a10, _a11, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, FLAGS) \
    WPP_ANNOTATE(dma_engine_c374) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12, _a13, _a14)), \
            WPP_SF_DDDDD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, FLAGS) \
                32, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12, _a13, _a14), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c385
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c385(FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c385) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)); \
            WPP_RECORDER_AND_TRACE_SF_sD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, FLAGS), \
                     33, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c385(FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, FLAGS) \
    WPP_ANNOTATE(dma_engine_c385) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)), \
            WPP_RECORDER_SF_sD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, FLAGS), \
                33, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c385(FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, FLAGS) \
    WPP_ANNOTATE(dma_engine_c385) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)), \
            WPP_SF_sD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, FLAGS) \
                33, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c392
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c392(FLAGS, MSG, _a10, _a11, _a12, _a13, _a14, _a15, _a16, _a17, _a18, _a19, _a20, _a21) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_INFORMATION, FLAGS), MSG, _a10, _a11, _a12, _a13, _a14, _a15, _a16, _a17, _a18, _a19, _a20, _a21) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_INFORMATION, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c392) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_INFORMATION, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_INFORMATION, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12, _a13, _a14, _a15, _a16, _a17, _a18, _a19, _a20, _a21)); \
            WPP_RECORDER_AND_TRACE_SF_sDDsssssssss( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_INFORMATION, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_INFORMATION, FLAGS), \
                     34, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12, _a13, _a14, _a15, _a16, _a17, _a18, _a19, _a20, _a21);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_INFORMATION, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c392(FLAGS, MSG, _a10, _a11, _a12, _a13, _a14, _a15, _a16, _a17, _a18, _a19, _a20, _a21) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_INFORMATION, FLAGS), MSG, _a10, _a11, _a12, _a13, _a14, _a15, _a16, _a17, _a18, _a19, _a20, _a21) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_INFORMATION, FLAGS) \
    WPP_ANNOTATE(dma_engine_c392) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_INFORMATION, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12, _a13, _a14, _a15, _a16, _a17, _a18, _a19, _a20, _a21)), \
            WPP_RECORDER_SF_sDDsssssssss( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_INFORMATION, FLAGS), \
                34, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12, _a13, _a14, _a15, _a16, _a17, _a18, _a19, _a20, _a21), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_INFORMATION, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c392(FLAGS, MSG, _a10, _a11, _a12, _a13, _a14, _a15, _a16, _a17, _a18, _a19, _a20, _a21) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_INFORMATION, FLAGS), MSG, _a10, _a11, _a12, _a13, _a14, _a15, _a16, _a17, _a18, _a19, _a20, _a21) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_INFORMATION, FLAGS) \
    WPP_ANNOTATE(dma_engine_c392) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_INFORMATION, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12, _a13, _a14, _a15, _a16, _a17, _a18, _a19, _a20, _a21)), \
            WPP_SF_sDDsssssssss( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_INFORMATION, FLAGS) \
                34, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12, _a13, _a14, _a15, _a16, _a17, _a18, _a19, _a20, _a21), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_INFORMATION, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c430
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c430(FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c430) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)); \
            WPP_RECORDER_AND_TRACE_SF_id( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, FLAGS), \
                     35, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c430(FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, FLAGS) \
    WPP_ANNOTATE(dma_engine_c430) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)), \
            WPP_RECORDER_SF_id( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, FLAGS), \
                35, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c430(FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, FLAGS) \
    WPP_ANNOTATE(dma_engine_c430) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)), \
            WPP_SF_id( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, FLAGS) \
                35, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c466
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c466(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c466) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10)); \
            WPP_RECORDER_AND_TRACE_SF_D( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, FLAGS), \
                     36, \
                     WPP_LOCAL_TraceGuids+0, _a10);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c466(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, FLAGS) \
    WPP_ANNOTATE(dma_engine_c466) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_RECORDER_SF_D( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, FLAGS), \
                36, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c466(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, FLAGS) \
    WPP_ANNOTATE(dma_engine_c466) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_SF_D( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, FLAGS) \
                36, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c474
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c474(FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_WARNING, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_WARNING, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c474) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_WARNING, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_WARNING, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_WARNING, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_WARNING, FLAGS), \
                     37, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_WARNING, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c474(FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_WARNING, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_WARNING, FLAGS) \
    WPP_ANNOTATE(dma_engine_c474) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_WARNING, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_WARNING, FLAGS), \
                37, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_WARNING, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c474(FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_WARNING, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_WARNING, FLAGS) \
    WPP_ANNOTATE(dma_engine_c474) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_WARNING, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_WARNING, FLAGS) \
                37, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_WARNING, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c512
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c512(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c512) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10)); \
            WPP_RECORDER_AND_TRACE_SF_d( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, FLAGS), \
                     38, \
                     WPP_LOCAL_TraceGuids+0, _a10);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c512(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    WPP_ANNOTATE(dma_engine_c512) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_RECORDER_SF_d( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, FLAGS), \
                38, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c512(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    WPP_ANNOTATE(dma_engine_c512) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_SF_d( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, FLAGS) \
                38, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c516
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c516(FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_INFORMATION, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_INFORMATION, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c516) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_INFORMATION, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_INFORMATION, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_sDs( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_INFORMATION, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_INFORMATION, FLAGS), \
                     39, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_INFORMATION, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c516(FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_INFORMATION, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_INFORMATION, FLAGS) \
    WPP_ANNOTATE(dma_engine_c516) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_INFORMATION, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_RECORDER_SF_sDs( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_INFORMATION, FLAGS), \
                39, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_INFORMATION, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c516(FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_INFORMATION, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_INFORMATION, FLAGS) \
    WPP_ANNOTATE(dma_engine_c516) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_INFORMATION, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_SF_sDs( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_INFORMATION, FLAGS) \
                39, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_INFORMATION, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c519
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c519(FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_INFORMATION, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_INFORMATION, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c519) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_INFORMATION, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_INFORMATION, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)); \
            WPP_RECORDER_AND_TRACE_SF_sD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_INFORMATION, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_INFORMATION, FLAGS), \
                     40, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_INFORMATION, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c519(FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_INFORMATION, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_INFORMATION, FLAGS) \
    WPP_ANNOTATE(dma_engine_c519) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_INFORMATION, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)), \
            WPP_RECORDER_SF_sD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_INFORMATION, FLAGS), \
                40, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_INFORMATION, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c519(FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_INFORMATION, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_INFORMATION, FLAGS) \
    WPP_ANNOTATE(dma_engine_c519) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_INFORMATION, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)), \
            WPP_SF_sD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_INFORMATION, FLAGS) \
                40, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_INFORMATION, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c529
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c529(FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_INFORMATION, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_INFORMATION, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c529) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_INFORMATION, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_INFORMATION, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_sDD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_INFORMATION, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_INFORMATION, FLAGS), \
                     41, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_INFORMATION, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c529(FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_INFORMATION, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_INFORMATION, FLAGS) \
    WPP_ANNOTATE(dma_engine_c529) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_INFORMATION, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_RECORDER_SF_sDD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_INFORMATION, FLAGS), \
                41, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_INFORMATION, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c529(FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_INFORMATION, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_INFORMATION, FLAGS) \
    WPP_ANNOTATE(dma_engine_c529) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_INFORMATION, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_SF_sDD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_INFORMATION, FLAGS) \
                41, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_INFORMATION, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c535
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c535(FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_INFORMATION, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_INFORMATION, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c535) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_INFORMATION, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_INFORMATION, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_sDD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_INFORMATION, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_INFORMATION, FLAGS), \
                     42, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_INFORMATION, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c535(FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_INFORMATION, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_INFORMATION, FLAGS) \
    WPP_ANNOTATE(dma_engine_c535) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_INFORMATION, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_RECORDER_SF_sDD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_INFORMATION, FLAGS), \
                42, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_INFORMATION, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c535(FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_INFORMATION, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_INFORMATION, FLAGS) \
    WPP_ANNOTATE(dma_engine_c535) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_INFORMATION, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_SF_sDD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_INFORMATION, FLAGS) \
                42, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_INFORMATION, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c541
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c541(FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c541) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, FLAGS), \
                     43, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c541(FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    WPP_ANNOTATE(dma_engine_c541) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, FLAGS), \
                43, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c541(FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    WPP_ANNOTATE(dma_engine_c541) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, FLAGS) \
                43, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c546
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c546(FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_INFORMATION, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_INFORMATION, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c546) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_INFORMATION, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_INFORMATION, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)); \
            WPP_RECORDER_AND_TRACE_SF_sD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_INFORMATION, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_INFORMATION, FLAGS), \
                     44, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_INFORMATION, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c546(FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_INFORMATION, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_INFORMATION, FLAGS) \
    WPP_ANNOTATE(dma_engine_c546) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_INFORMATION, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)), \
            WPP_RECORDER_SF_sD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_INFORMATION, FLAGS), \
                44, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_INFORMATION, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c546(FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_INFORMATION, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_INFORMATION, FLAGS) \
    WPP_ANNOTATE(dma_engine_c546) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_INFORMATION, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)), \
            WPP_SF_sD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_INFORMATION, FLAGS) \
                44, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_INFORMATION, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c551
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c551(FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c551) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, FLAGS), \
                     45, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c551(FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    WPP_ANNOTATE(dma_engine_c551) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, FLAGS), \
                45, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c551(FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    WPP_ANNOTATE(dma_engine_c551) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, FLAGS) \
                45, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c555
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c555(FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_INFORMATION, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_INFORMATION, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c555) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_INFORMATION, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_INFORMATION, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)); \
            WPP_RECORDER_AND_TRACE_SF_sD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_INFORMATION, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_INFORMATION, FLAGS), \
                     46, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_INFORMATION, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c555(FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_INFORMATION, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_INFORMATION, FLAGS) \
    WPP_ANNOTATE(dma_engine_c555) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_INFORMATION, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)), \
            WPP_RECORDER_SF_sD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_INFORMATION, FLAGS), \
                46, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_INFORMATION, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c555(FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_INFORMATION, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_INFORMATION, FLAGS) \
    WPP_ANNOTATE(dma_engine_c555) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_INFORMATION, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)), \
            WPP_SF_sD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_INFORMATION, FLAGS) \
                46, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_INFORMATION, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c571
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c571(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c571) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10)); \
            WPP_RECORDER_AND_TRACE_SF_d( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, FLAGS), \
                     47, \
                     WPP_LOCAL_TraceGuids+0, _a10);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c571(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    WPP_ANNOTATE(dma_engine_c571) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_RECORDER_SF_d( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, FLAGS), \
                47, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c571(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    WPP_ANNOTATE(dma_engine_c571) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_SF_d( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, FLAGS) \
                47, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c577
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c577(FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c577) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_DDi( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, FLAGS), \
                     48, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c577(FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, FLAGS) \
    WPP_ANNOTATE(dma_engine_c577) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_RECORDER_SF_DDi( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, FLAGS), \
                48, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c577(FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, FLAGS) \
    WPP_ANNOTATE(dma_engine_c577) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_SF_DDi( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, FLAGS) \
                48, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c588
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c588(FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c588) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, FLAGS), \
                     49, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c588(FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    WPP_ANNOTATE(dma_engine_c588) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, FLAGS), \
                49, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c588(FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    WPP_ANNOTATE(dma_engine_c588) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, FLAGS) \
                49, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c594
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c594(FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c594) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, FLAGS), \
                     50, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c594(FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    WPP_ANNOTATE(dma_engine_c594) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, FLAGS), \
                50, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c594(FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    WPP_ANNOTATE(dma_engine_c594) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, FLAGS) \
                50, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c598
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c598(FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_INFORMATION, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_INFORMATION, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c598) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_INFORMATION, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_INFORMATION, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_qDq( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_INFORMATION, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_INFORMATION, FLAGS), \
                     51, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_INFORMATION, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c598(FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_INFORMATION, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_INFORMATION, FLAGS) \
    WPP_ANNOTATE(dma_engine_c598) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_INFORMATION, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_RECORDER_SF_qDq( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_INFORMATION, FLAGS), \
                51, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_INFORMATION, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c598(FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_INFORMATION, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_INFORMATION, FLAGS) \
    WPP_ANNOTATE(dma_engine_c598) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_INFORMATION, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_SF_qDq( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_INFORMATION, FLAGS) \
                51, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_INFORMATION, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c604
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c604(FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c604) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, FLAGS), \
                     52, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c604(FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    WPP_ANNOTATE(dma_engine_c604) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, FLAGS), \
                52, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c604(FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    WPP_ANNOTATE(dma_engine_c604) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, FLAGS) \
                52, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c610
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c610(FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c610) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_qDq( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, FLAGS), \
                     53, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c610(FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, FLAGS) \
    WPP_ANNOTATE(dma_engine_c610) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_RECORDER_SF_qDq( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, FLAGS), \
                53, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c610(FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, FLAGS) \
    WPP_ANNOTATE(dma_engine_c610) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_SF_qDq( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, FLAGS) \
                53, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c618
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c618(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c618) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10)); \
            WPP_RECORDER_AND_TRACE_SF_d( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, FLAGS), \
                     54, \
                     WPP_LOCAL_TraceGuids+0, _a10);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c618(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    WPP_ANNOTATE(dma_engine_c618) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_RECORDER_SF_d( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, FLAGS), \
                54, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c618(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    WPP_ANNOTATE(dma_engine_c618) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_SF_d( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, FLAGS) \
                54, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c632
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c632(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c632) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10)); \
            WPP_RECORDER_AND_TRACE_SF_D( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, FLAGS), \
                     55, \
                     WPP_LOCAL_TraceGuids+0, _a10);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c632(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    WPP_ANNOTATE(dma_engine_c632) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_RECORDER_SF_D( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, FLAGS), \
                55, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c632(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    WPP_ANNOTATE(dma_engine_c632) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_SF_D( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, FLAGS) \
                55, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c642
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c642(FLAGS, MSG, _a10, _a11, _a12, _a13, _a14, _a15) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_INFORMATION, FLAGS), MSG, _a10, _a11, _a12, _a13, _a14, _a15) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_INFORMATION, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c642) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_INFORMATION, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_INFORMATION, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12, _a13, _a14, _a15)); \
            WPP_RECORDER_AND_TRACE_SF_sDDDDD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_INFORMATION, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_INFORMATION, FLAGS), \
                     56, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12, _a13, _a14, _a15);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_INFORMATION, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c642(FLAGS, MSG, _a10, _a11, _a12, _a13, _a14, _a15) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_INFORMATION, FLAGS), MSG, _a10, _a11, _a12, _a13, _a14, _a15) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_INFORMATION, FLAGS) \
    WPP_ANNOTATE(dma_engine_c642) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_INFORMATION, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12, _a13, _a14, _a15)), \
            WPP_RECORDER_SF_sDDDDD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_INFORMATION, FLAGS), \
                56, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12, _a13, _a14, _a15), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_INFORMATION, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c642(FLAGS, MSG, _a10, _a11, _a12, _a13, _a14, _a15) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_INFORMATION, FLAGS), MSG, _a10, _a11, _a12, _a13, _a14, _a15) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_INFORMATION, FLAGS) \
    WPP_ANNOTATE(dma_engine_c642) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_INFORMATION, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12, _a13, _a14, _a15)), \
            WPP_SF_sDDDDD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_INFORMATION, FLAGS) \
                56, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12, _a13, _a14, _a15), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_INFORMATION, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c655
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c655(FLAGS, MSG, _a10, _a11, _a12, _a13, _a14, _a15) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_INFORMATION, FLAGS), MSG, _a10, _a11, _a12, _a13, _a14, _a15) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_INFORMATION, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c655) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_INFORMATION, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_INFORMATION, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12, _a13, _a14, _a15)); \
            WPP_RECORDER_AND_TRACE_SF_sDDDDD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_INFORMATION, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_INFORMATION, FLAGS), \
                     57, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12, _a13, _a14, _a15);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_INFORMATION, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c655(FLAGS, MSG, _a10, _a11, _a12, _a13, _a14, _a15) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_INFORMATION, FLAGS), MSG, _a10, _a11, _a12, _a13, _a14, _a15) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_INFORMATION, FLAGS) \
    WPP_ANNOTATE(dma_engine_c655) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_INFORMATION, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12, _a13, _a14, _a15)), \
            WPP_RECORDER_SF_sDDDDD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_INFORMATION, FLAGS), \
                57, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12, _a13, _a14, _a15), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_INFORMATION, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c655(FLAGS, MSG, _a10, _a11, _a12, _a13, _a14, _a15) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_INFORMATION, FLAGS), MSG, _a10, _a11, _a12, _a13, _a14, _a15) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_INFORMATION, FLAGS) \
    WPP_ANNOTATE(dma_engine_c655) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_INFORMATION, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12, _a13, _a14, _a15)), \
            WPP_SF_sDDDDD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_INFORMATION, FLAGS) \
                57, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12, _a13, _a14, _a15), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_INFORMATION, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c666
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c666(FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c666) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, FLAGS), \
                     58, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c666(FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, FLAGS) \
    WPP_ANNOTATE(dma_engine_c666) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, FLAGS), \
                58, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c666(FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, FLAGS) \
    WPP_ANNOTATE(dma_engine_c666) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, FLAGS) \
                58, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c712
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c712(FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_WARNING, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_WARNING, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c712) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_WARNING, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_WARNING, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_WARNING, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_WARNING, FLAGS), \
                     59, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_WARNING, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c712(FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_WARNING, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_WARNING, FLAGS) \
    WPP_ANNOTATE(dma_engine_c712) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_WARNING, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_WARNING, FLAGS), \
                59, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_WARNING, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c712(FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_WARNING, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_WARNING, FLAGS) \
    WPP_ANNOTATE(dma_engine_c712) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_WARNING, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_WARNING, FLAGS) \
                59, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_WARNING, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c726
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c726(FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c726) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)); \
            WPP_RECORDER_AND_TRACE_SF_DD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, FLAGS), \
                     60, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c726(FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, FLAGS) \
    WPP_ANNOTATE(dma_engine_c726) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)), \
            WPP_RECORDER_SF_DD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, FLAGS), \
                60, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c726(FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, FLAGS) \
    WPP_ANNOTATE(dma_engine_c726) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)), \
            WPP_SF_DD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, FLAGS) \
                60, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c731
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c731(FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c731) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)); \
            WPP_RECORDER_AND_TRACE_SF_DD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, FLAGS), \
                     61, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c731(FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, FLAGS) \
    WPP_ANNOTATE(dma_engine_c731) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)), \
            WPP_RECORDER_SF_DD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, FLAGS), \
                61, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c731(FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, FLAGS) \
    WPP_ANNOTATE(dma_engine_c731) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)), \
            WPP_SF_DD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, FLAGS) \
                61, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c739
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c739(FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_INFORMATION, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_INFORMATION, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c739) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_INFORMATION, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_INFORMATION, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_sDD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_INFORMATION, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_INFORMATION, FLAGS), \
                     62, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_INFORMATION, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c739(FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_INFORMATION, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_INFORMATION, FLAGS) \
    WPP_ANNOTATE(dma_engine_c739) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_INFORMATION, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_RECORDER_SF_sDD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_INFORMATION, FLAGS), \
                62, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_INFORMATION, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c739(FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_INFORMATION, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_INFORMATION, FLAGS) \
    WPP_ANNOTATE(dma_engine_c739) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_INFORMATION, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_SF_sDD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_INFORMATION, FLAGS) \
                62, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_INFORMATION, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c751
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c751(FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c751) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, FLAGS), \
                     63, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c751(FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, FLAGS) \
    WPP_ANNOTATE(dma_engine_c751) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, FLAGS), \
                63, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c751(FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, FLAGS) \
    WPP_ANNOTATE(dma_engine_c751) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, FLAGS) \
                63, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c805
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c805(FLAGS, MSG, _a10, _a11, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, FLAGS), MSG, _a10, _a11, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c805) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12, _a13, _a14)); \
            WPP_RECORDER_AND_TRACE_SF_sDDDD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, FLAGS), \
                     64, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12, _a13, _a14);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c805(FLAGS, MSG, _a10, _a11, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, FLAGS), MSG, _a10, _a11, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, FLAGS) \
    WPP_ANNOTATE(dma_engine_c805) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12, _a13, _a14)), \
            WPP_RECORDER_SF_sDDDD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, FLAGS), \
                64, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12, _a13, _a14), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c805(FLAGS, MSG, _a10, _a11, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, FLAGS), MSG, _a10, _a11, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, FLAGS) \
    WPP_ANNOTATE(dma_engine_c805) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12, _a13, _a14)), \
            WPP_SF_sDDDD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, FLAGS) \
                64, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12, _a13, _a14), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c825
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c825(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c825) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10)); \
            WPP_RECORDER_AND_TRACE_SF_d( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, FLAGS), \
                     65, \
                     WPP_LOCAL_TraceGuids+0, _a10);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c825(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    WPP_ANNOTATE(dma_engine_c825) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_RECORDER_SF_d( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, FLAGS), \
                65, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c825(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    WPP_ANNOTATE(dma_engine_c825) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_SF_d( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, FLAGS) \
                65, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c848
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c848(FLAGS, MSG, _a10, _a11, _a12, _a13, _a14, _a15) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, FLAGS), MSG, _a10, _a11, _a12, _a13, _a14, _a15) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c848) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12, _a13, _a14, _a15)); \
            WPP_RECORDER_AND_TRACE_SF_sDIDDD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, FLAGS), \
                     66, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12, _a13, _a14, _a15);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c848(FLAGS, MSG, _a10, _a11, _a12, _a13, _a14, _a15) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, FLAGS), MSG, _a10, _a11, _a12, _a13, _a14, _a15) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, FLAGS) \
    WPP_ANNOTATE(dma_engine_c848) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12, _a13, _a14, _a15)), \
            WPP_RECORDER_SF_sDIDDD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, FLAGS), \
                66, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12, _a13, _a14, _a15), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c848(FLAGS, MSG, _a10, _a11, _a12, _a13, _a14, _a15) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, FLAGS), MSG, _a10, _a11, _a12, _a13, _a14, _a15) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, FLAGS) \
    WPP_ANNOTATE(dma_engine_c848) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12, _a13, _a14, _a15)), \
            WPP_SF_sDIDDD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, FLAGS) \
                66, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12, _a13, _a14, _a15), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c864
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c864(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c864) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10)); \
            WPP_RECORDER_AND_TRACE_SF_d( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, FLAGS), \
                     67, \
                     WPP_LOCAL_TraceGuids+0, _a10);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c864(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    WPP_ANNOTATE(dma_engine_c864) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_RECORDER_SF_d( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, FLAGS), \
                67, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c864(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    WPP_ANNOTATE(dma_engine_c864) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_SF_d( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, FLAGS) \
                67, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c875
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c875(FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_INFORMATION, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_INFORMATION, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c875) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_INFORMATION, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_INFORMATION, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_DDi( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_INFORMATION, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_INFORMATION, FLAGS), \
                     68, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_INFORMATION, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c875(FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_INFORMATION, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_INFORMATION, FLAGS) \
    WPP_ANNOTATE(dma_engine_c875) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_INFORMATION, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_RECORDER_SF_DDi( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_INFORMATION, FLAGS), \
                68, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_INFORMATION, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c875(FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_INFORMATION, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_INFORMATION, FLAGS) \
    WPP_ANNOTATE(dma_engine_c875) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_INFORMATION, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_SF_DDi( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_INFORMATION, FLAGS) \
                68, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_INFORMATION, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c890
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c890(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c890) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10)); \
            WPP_RECORDER_AND_TRACE_SF_D( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, FLAGS), \
                     69, \
                     WPP_LOCAL_TraceGuids+0, _a10);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c890(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    WPP_ANNOTATE(dma_engine_c890) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_RECORDER_SF_D( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, FLAGS), \
                69, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c890(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    WPP_ANNOTATE(dma_engine_c890) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_SF_D( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, FLAGS) \
                69, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c900
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c900(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c900) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10)); \
            WPP_RECORDER_AND_TRACE_SF_D( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, FLAGS), \
                     70, \
                     WPP_LOCAL_TraceGuids+0, _a10);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c900(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, FLAGS) \
    WPP_ANNOTATE(dma_engine_c900) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_RECORDER_SF_D( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, FLAGS), \
                70, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c900(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, FLAGS) \
    WPP_ANNOTATE(dma_engine_c900) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_SF_D( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, FLAGS) \
                70, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c917
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c917(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c917) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10)); \
            WPP_RECORDER_AND_TRACE_SF_D( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, FLAGS), \
                     71, \
                     WPP_LOCAL_TraceGuids+0, _a10);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c917(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    WPP_ANNOTATE(dma_engine_c917) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_RECORDER_SF_D( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, FLAGS), \
                71, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c917(FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, FLAGS) \
    WPP_ANNOTATE(dma_engine_c917) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_SF_D( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, FLAGS) \
                71, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c922
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c922(FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c922) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)); \
            WPP_RECORDER_AND_TRACE_SF_DD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, FLAGS), \
                     72, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c922(FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, FLAGS) \
    WPP_ANNOTATE(dma_engine_c922) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)), \
            WPP_RECORDER_SF_DD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, FLAGS), \
                72, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c922(FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, FLAGS) \
    WPP_ANNOTATE(dma_engine_c922) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)), \
            WPP_SF_DD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, FLAGS) \
                72, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c931
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c931(FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c931) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_DDD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, FLAGS), \
                     73, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c931(FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, FLAGS) \
    WPP_ANNOTATE(dma_engine_c931) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_RECORDER_SF_DDD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, FLAGS), \
                73, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c931(FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, FLAGS) \
    WPP_ANNOTATE(dma_engine_c931) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_SF_DDD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, FLAGS) \
                73, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dma_engine_c947
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c947(FLAGS, MSG, _a10, _a11, _a12, _a13, _a14, _a15) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, FLAGS), MSG, _a10, _a11, _a12, _a13, _a14, _a15) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, FLAGS) \
    do {\
        WPP_ANNOTATE(dma_engine_c947) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12, _a13, _a14, _a15)); \
            WPP_RECORDER_AND_TRACE_SF_DDDDDD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, FLAGS), \
                     74, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12, _a13, _a14, _a15);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dma_engine_c947(FLAGS, MSG, _a10, _a11, _a12, _a13, _a14, _a15) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, FLAGS), MSG, _a10, _a11, _a12, _a13, _a14, _a15) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, FLAGS) \
    WPP_ANNOTATE(dma_engine_c947) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12, _a13, _a14, _a15)), \
            WPP_RECORDER_SF_DDDDDD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, FLAGS), \
                74, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12, _a13, _a14, _a15), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dma_engine_c947(FLAGS, MSG, _a10, _a11, _a12, _a13, _a14, _a15) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, FLAGS), MSG, _a10, _a11, _a12, _a13, _a14, _a15) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, FLAGS) \
    WPP_ANNOTATE(dma_engine_c947) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12, _a13, _a14, _a15)), \
            WPP_SF_DDDDDD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, FLAGS) \
                74, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12, _a13, _a14, _a15), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, FLAGS)
#endif // ENABLE_WPP_RECORDER

// Functions
#undef DoDebugTrace
#define DoDebugTrace WPP_(CALL)
#undef DoTraceMessage
#define DoTraceMessage WPP_(CALL)
#undef TraceError
#define TraceError WPP_(CALL)
#undef TraceEvents
#define TraceEvents WPP_(CALL)
#undef TraceInfo
#define TraceInfo WPP_(CALL)
#undef TraceVerbose
#define TraceVerbose WPP_(CALL)
#undef TraceWarning
#define TraceWarning WPP_(CALL)

#ifdef __cplusplus
} // extern "C"
#endif

